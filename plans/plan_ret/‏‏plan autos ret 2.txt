
نظام تقييم السيارات المتقدم في بلغاريا (الإنجليزية والبلغارية)
بشرط العمله هي يورو لان بلغاريا الغت الليفا لذلك يرجى الانتباه في التنفيذ 
تطوير نظام تقييم السيارات لمستوى احترافي عالمي
سأقوم بتطوير النظام الحالي بإضافة ميزات متقدمة تجعله نظاماً عالمياً متكاملاً، مع التركيز على الذكاء الاصطنائي، تحليل البيانات، والتجربة البصرية الفائقة.

الكود المطور بشكل كامل ومتقدم
html
<!DOCTYPE html>
<html lang="bg" dir="ltr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Global Car Intelligence System - Глобална система за оценка на автомобили</title>
        <!-- مكتبات CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.160.0/examples/jsm/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.160.0/examples/jsm/loaders/GLTFLoader.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
        <!-- مكتبات JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
        <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
        
        :root {
            --primary: #2563eb;
            --primary-dark: #1e40af;
            --secondary: #f59e0b;
            --success: #10b981;
            --danger: #ef4444;
            --dark: #1f2937;
            --light: #f3f4f6;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            min-height: 100vh;
        }
        
        .glass-effect {
            background: rgba(255, 255, 255, 0.85);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .gradient-bg {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
        }
        
        .gradient-text {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .floating-element {
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        .floating-element:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        }
        
        #interactive-canvas {
            display: block;
            width: 100%;
            height: 100%;
            cursor: grab;
            border-radius: 12px;
        }
        
        #interactive-canvas:active {
            cursor: grabbing;
        }
        
        .animated-border {
            position: relative;
        }
        
        .animated-border::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 0;
            height: 2px;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            transition: width 0.3s ease;
        }
        
        .animated-border:hover::after {
            width: 100%;
        }
        
        .car-card {
            transition: all 0.3s ease;
            border-radius: 12px;
            overflow: hidden;
        }
        
        .car-card:hover {
            transform: translateY(-5px) scale(1.02);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
        }
        
        .loader {
            border: 3px solid #f3f3f3;
            border-top: 3px solid var(--primary);
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .pulse {
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        .slide-in {
            animation: slideIn 0.5s forwards;
        }
        
        @keyframes slideIn {
            from { transform: translateX(-100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        .progress-ring {
            transform: rotate(-90deg);
        }
        
        .progress-ring__circle {
            transition: stroke-dashoffset 0.5s;
        }
        
        .ai-prediction-card {
            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
            border: 1px solid rgba(37, 99, 235, 0.2);
            border-radius: 12px;
        }
        
        .market-insight-card {
            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
            border: 1px solid rgba(34, 197, 94, 0.2);
            border-radius: 12px;
        }
        
        .dark-mode {
            background: linear-gradient(135deg, #1f2937 0%, #111827 100%);
            color: #f3f4f6;
        }
        
        .dark-card {
            background: rgba(31, 41, 55, 0.8);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: #f3f4f6;
        }
        
        .neon-border {
            box-shadow: 0 0 5px var(--primary), 0 0 10px var(--primary), 0 0 15px var(--primary);
        }
        
        .holographic-effect {
            background: linear-gradient(45deg, #6366f1, #8b5cf6, #ec4899, #f59e0b);
            background-size: 400% 400%;
            animation: holographic 8s ease infinite;
        }
        
        @keyframes holographic {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .typewriter {
            overflow: hidden;
            border-right: 3px solid var(--primary);
            white-space: nowrap;
            animation: typing 3.5s steps(40, end), blink-caret 0.75s step-end infinite;
        }
        
        @keyframes typing {
            from { width: 0; }
            to { width: 100%; }
        }
        
        @keyframes blink-caret {
            from, to { border-color: transparent; }
            50% { border-color: var(--primary); }
        }
        
        .parallax {
            background-attachment: fixed;
            background-position: center;
            background-repeat: no-repeat;
            background-size: cover;
        }
        
        .grid-pattern {
            background-image: 
                linear-gradient(rgba(37, 99, 235, 0.1) 1px, transparent 1px),
                linear-gradient(90deg, rgba(37, 99, 235, 0.1) 1px, transparent 1px);
            background-size: 20px 20px;
        }
    </style>
</head>
<body class="grid-pattern">
    <!-- Global Loader -->
    <div id="global-loader" class="fixed inset-0 bg-white bg-opacity-90 z-50 flex items-center justify-center hidden">
        <div class="text-center">
            <div class="loader mx-auto mb-4"></div>
            <h3 class="text-xl font-bold text-gray-800 mb-2" data-en="Loading Advanced Features" data-bg="Зареждане на разширени функционалности">Loading Advanced Features</h3>
            <p class="text-gray-600" data-en="Preparing AI-powered analysis and 3D visualization" data-bg="Подготвяне на анализ с изкуствен интелект и 3D визуализация">Preparing AI-powered analysis and 3D visualization</p>
        </div>
    </div>

    <!-- AI Assistant Panel -->
    <div id="ai-assistant" class="fixed bottom-24 right-6 w-80 bg-white rounded-xl shadow-2xl z-40 hidden floating-element">
        <div class="gradient-bg text-white p-4 rounded-t-xl flex justify-between items-center">
            <div class="flex items-center">
                <div class="h-10 w-10 rounded-full bg-white bg-opacity-20 flex items-center justify-center mr-3">
                    <i class="fas fa-robot"></i>
                </div>
                <div>
                    <h3 class="font-semibold" data-en="AI Assistant" data-bg="Асистент с изкуствен интелект">AI Assistant</h3>
                    <p class="text-xs text-blue-100" data-en="Online - Ready to help" data-bg="Онлайн - Готов да помогне">Online - Ready to help</p>
                </div>
            </div>
            <button id="minimize-assistant" class="text-white">
                <i class="fas fa-minus"></i>
            </button>
        </div>
        <div id="assistant-messages" class="p-4 h-60 overflow-y-auto">
            <div class="flex mb-4">
                <div class="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center mr-3">
                    <i class="fas fa-robot text-blue-600"></i>
                </div>
                <div class="bg-gray-100 p-3 rounded-lg max-w-[80%]">
                    <p class="text-sm" data-en="Hello! I'm your AI car evaluation assistant. I can help you analyze your car's value, compare models, and understand market trends. How can I assist you today?" data-bg="Здравейте! Аз съм вашият асистент за оценка на автомобили с изкуствен интелект. Мога да ви помогна да анализирате стойността на автомобила си, да сравнявате модели и да разбирате пазарните тенденции. Как мога да ви помогна днес?">Hello! I'm your AI car evaluation assistant. How can I assist you today?</p>
                </div>
            </div>
        </div>
        <div class="p-3 border-t border-gray-200">
            <div class="flex">
                <input type="text" id="assistant-input" placeholder="Ask something..." class="flex-1 border border-gray-300 rounded-l-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" data-en-placeholder="Ask something..." data-bg-placeholder="Задайте въпрос...">
                <button id="send-assistant-message" class="bg-blue-600 text-white px-4 rounded-r-lg">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Mini Assistant Button -->
    <button id="open-assistant" class="fixed bottom-6 right-6 w-14 h-14 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-full shadow-lg flex items-center justify-center z-30 pulse">
        <i class="fas fa-robot text-xl"></i>
    </button>

    <!-- Navigation Bar -->
    <nav class="glass-effect fixed top-0 left-0 right-0 z-50 py-3 px-6">
        <div class="container mx-auto flex justify-between items-center">
            <div class="flex items-center">
                <div class="h-10 w-10 rounded-lg gradient-bg flex items-center justify-center mr-3">
                    <i class="fas fa-car text-white"></i>
                </div>
                <h1 class="text-xl font-bold gradient-text" data-en="AutoIntelligence" data-bg="АвтоИнтелигентност">AutoIntelligence</h1>
            </div>
            
            <div class="hidden md:flex space-x-6">
                <a href="#" class="font-medium text-gray-700 hover:text-blue-600 animated-border" data-en="Home" data-bg="Начало">Home</a>
                <a href="#" class="font-medium text-gray-700 hover:text-blue-600 animated-border" data-en="Market Analysis" data-bg="Пазарен анализ">Market Analysis</a>
                <a href="#" class="font-medium text-gray-700 hover:text-blue-600 animated-border" data-en="Car Comparison" data-bg="Сравнение на коли">Car Comparison</a>
                <a href="#" class="font-medium text-gray-700 hover:text-blue-600 animated-border" data-en="Price Forecast" data-bg="Прогноза за цени">Price Forecast</a>
                <a href="#" class="font-medium text-gray-700 hover:text-blue-600 animated-border" data-en="News" data-bg="Новини">News</a>
            </div>
            
            <div class="flex items-center space-x-4">
                <button id="theme-toggle" class="p-2 rounded-lg bg-gray-100 hover:bg-gray-200">
                    <i class="fas fa-moon text-gray-700"></i>
                </button>
                <div class="bg-white bg-opacity-20 rounded-full shadow-md p-1">
                    <button id="lang-en" class="lang-btn px-4 py-2 rounded-full bg-white text-blue-600 font-medium">EN</button>
                    <button id="lang-bg" class="lang-btn px-4 py-2 rounded-full bg-transparent text-gray-700">BG</button>
                </div>
                <button id="login-btn" class="bg-blue-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-blue-700">
                    <i class="fas fa-user-circle mr-2"></i>
                    <span data-en="Sign In" data-bg="Вход">Sign In</span>
                </button>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container mx-auto px-4 pt-24 pb-12">
        <!-- Hero Section -->
        <section class="glass-effect rounded-2xl p-8 mb-12 relative overflow-hidden">
            <div class="absolute top-0 right-0 -mt-20 -mr-20 opacity-10">
                <i class="fas fa-car text-[300px] text-blue-600"></i>
            </div>
            
            <div class="relative z-10 grid grid-cols-1 lg:grid-cols-2 gap-8 items-center">
                <div>
                    <h2 class="text-4xl md:text-5xl font-bold text-gray-800 mb-4 typewriter" data-en="Intelligent Car Valuation Platform" data-bg="Интелигентна платформа за оценка на автомобили">Intelligent Car Valuation Platform</h2>
                    <p class="text-lg text-gray-600 mb-6" data-en="AI-powered car valuation with real-time market analysis, predictive pricing, and comprehensive insights for buyers and sellers." data-bg="Оценка на автомобили с изкуствен интелект с анализ на пазара в реално време, прогнозно ценообразуване и изчерпателни прозрения за купувачи и продавачи.">AI-powered car valuation with real-time market analysis and predictive pricing.</p>
                    
                    <div class="flex flex-wrap gap-4">
                        <button class="gradient-bg text-white font-semibold px-6 py-3 rounded-lg hover:opacity-90 transition-all duration-300 flex items-center">
                            <i class="fas fa-bolt mr-2"></i>
                            <span data-en="Quick Evaluation" data-bg="Бърза оценка">Quick Evaluation</span>
                        </button>
                        <button class="bg-white text-blue-600 border border-blue-600 font-semibold px-6 py-3 rounded-lg hover:bg-blue-50 transition-all duration-300 flex items-center">
                            <i class="fas fa-chart-line mr-2"></i>
                            <span data-en="Market Trends" data-bg="Пазарни тенденции">Market Trends</span>
                        </button>
                    </div>
                </div>
                
                <div class="relative">
                    <div class="bg-gradient-to-br from-blue-600 to-purple-600 p-1 rounded-2xl holographic-effect">
                        <div class="bg-white rounded-2xl p-6">
                            <div class="flex justify-between items-center mb-6">
                                <h3 class="text-xl font-bold text-gray-800" data-en="Instant Valuation" data-bg="Моментна оценка">Instant Valuation</h3>
                                <div class="flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full">
                                    <i class="fas fa-shield-alt mr-2"></i>
                                    <span class="text-sm font-medium" data-en="AI Powered" data-bg="С изкуствен интелект">AI Powered</span>
                                </div>
                            </div>
                            
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-gray-700 mb-2 font-medium" data-en="Car Model" data-bg="Модел на автомобил">Car Model</label>
                                    <input type="text" placeholder="E.g. BMW X5" class="form-input w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all" data-en-placeholder="E.g. BMW X5" data-bg-placeholder="напр. BMW X5">
                                </div>
                                
                                <div class="grid grid-cols-2 gap-4">
                                    <div>
                                        <label class="block text-gray-700 mb-2 font-medium" data-en="Year" data-bg="Година">Year</label>
                                        <input type="number" placeholder="2020" class="form-input w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all">
                                    </div>
                                    <div>
                                        <label class="block text-gray-700 mb-2 font-medium" data-en="Mileage" data-bg="Километри">Mileage</label>
                                        <input type="number" placeholder="50,000 km" class="form-input w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all" data-en-placeholder="50,000 km" data-bg-placeholder="50,000 км">
                                    </div>
                                </div>
                                
                                <button class="gradient-bg text-white font-semibold px-6 py-3 rounded-lg hover:opacity-90 w-full transition-all duration-300 flex items-center justify-center">
                                    <i class="fas fa-calculator mr-2"></i>
                                    <span data-en="Calculate Value" data-bg="Изчисли стойност">Calculate Value</span>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="absolute -bottom-4 -left-4 bg-yellow-100 text-yellow-800 px-3 py-2 rounded-lg shadow-md">
                        <div class="flex items-center">
                            <i class="fas fa-bolt mr-2"></i>
                            <span class="text-sm font-medium" data-en="Real-time data" data-bg="Данни в реално време">Real-time data</span>
                        </div>
                    </div>
                    
                    <div class="absolute -top-4 -right-4 bg-blue-100 text-blue-800 px-3 py-2 rounded-lg shadow-md">
                        <div class="flex items-center">
                            <i class="fas fa-chart-line mr-2"></i>
                            <span class="text-sm font-medium" data-en="Market trends" data-bg="Пазарни тенденции">Market trends</span>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Main Dashboard -->
        <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 mb-8">
            <!-- Stats Cards -->
            <div class="glass-effect rounded-xl p-6 floating-element">
                <div class="flex items-center">
                    <div class="h-12 w-12 rounded-lg bg-blue-100 flex items-center justify-center mr-4">
                        <i class="fas fa-car text-blue-600 text-xl"></i>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600" data-en="Total Evaluations" data-bg="Общо оценки">Total Evaluations</p>
                        <h3 class="text-2xl font-bold text-gray-800">12,458</h3>
                    </div>
                </div>
                <div class="mt-4 flex items-center">
                    <span class="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full flex items-center">
                        <i class="fas fa-arrow-up mr-1"></i>
                        <span>12.4%</span>
                    </span>
                    <span class="text-xs text-gray-600 ml-2" data-en="from last month" data-bg="от миналия месец">from last month</span>
                </div>
            </div>
            
            <div class="glass-effect rounded-xl p-6 floating-element">
                <div class="flex items-center">
                    <div class="h-12 w-12 rounded-lg bg-green-100 flex items-center justify-center mr-4">
                        <i class="fas fa-euro-sign text-green-600 text-xl"></i>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600" data-en="Average Value" data-bg="Средна стойност">Average Value</p>
                        <h3 class="text-2xl font-bold text-gray-800">€24,356</h3>
                    </div>
                </div>
                <div class="mt-4 flex items-center">
                    <span class="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full flex items-center">
                        <i class="fas fa-arrow-up mr-1"></i>
                        <span>3.2%</span>
                    </span>
                    <span class="text-xs text-gray-600 ml-2" data-en="from last month" data-bg="от миналия месец">from last month</span>
                </div>
            </div>
            
            <div class="glass-effect rounded-xl p-6 floating-element">
                <div class="flex items-center">
                    <div class="h-12 w-12 rounded-lg bg-purple-100 flex items-center justify-center mr-4">
                        <i class="fas fa-chart-pie text-purple-600 text-xl"></i>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600" data-en="Market Activity" data-bg="Пазарна активност">Market Activity</p>
                        <h3 class="text-2xl font-bold text-gray-800">86.5%</h3>
                    </div>
                </div>
                <div class="mt-4 flex items-center">
                    <span class="bg-red-100 text-red-800 text-xs px-2 py-1 rounded-full flex items-center">
                        <i class="fas fa-arrow-down mr-1"></i>
                        <span>2.1%</span>
                    </span>
                    <span class="text-xs text-gray-600 ml-2" data-en="from last month" data-bg="от миналия месец">from last month</span>
                </div>
            </div>
            
            <div class="glass-effect rounded-xl p-6 floating-element">
                <div class="flex items-center">
                    <div class="h-12 w-12 rounded-lg bg-orange-100 flex items-center justify-center mr-4">
                        <i class="fas fa-users text-orange-600 text-xl"></i>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600" data-en="Active Users" data-bg="Активни потребители">Active Users</p>
                        <h3 class="text-2xl font-bold text-gray-800">5,372</h3>
                    </div>
                </div>
                <div class="mt-4 flex items-center">
                    <span class="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full flex items-center">
                        <i class="fas fa-arrow-up mr-1"></i>
                        <span>8.7%</span>
                    </span>
                    <span class="text-xs text-gray-600 ml-2" data-en="from last month" data-bg="от миналия месец">from last month</span>
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 xl:grid-cols-3 gap-6">
            <!-- Left Panel - Car Input Form -->
            <div class="xl:col-span-1">
                <div class="glass-effect rounded-2xl p-6 mb-6 floating-element">
                    <h2 class="text-xl font-bold text-gray-800 mb-6 pb-3 border-b border-gray-200 flex items-center">
                        <i class="fas fa-car-side mr-3 text-blue-600"></i>
                        <span data-en="Car Details" data-bg="Данни за автомобила">Car Details</span>
                    </h2>
                    
                    <!-- AI Suggestions -->
                    <div id="ai-suggestions" class="ai-prediction-card p-4 rounded-xl mb-6 hidden">
                        <div class="flex items-start">
                            <div class="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center mr-3 flex-shrink-0">
                                <i class="fas fa-robot text-blue-600"></i>
                            </div>
                            <div>
                                <p class="text-sm font-medium text-blue-800 mb-1" data-en="AI Suggestion" data-bg="Препоръка на изкуствения интелект">AI Suggestion</p>
                                <p id="suggestion-text" class="text-xs text-blue-700"></p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="space-y-6">
                        <div>
                            <label class="block text-gray-700 mb-3 font-medium" data-en="Manufacturer" data-bg="Марка">Manufacturer</label>
                            <div class="grid grid-cols-3 gap-3 mb-3">
                                <div class="car-card car-logo bg-gray-50 p-3 rounded-xl text-center cursor-pointer" data-make="toyota">
                                    <img src="https://www.carlogos.org/car-logos/toyota-logo-2020-gray.png" alt="Toyota" class="h-8 mx-auto mb-2 object-contain">
                                    <p class="text-xs font-medium">Toyota</p>
                                </div>
                                <div class="car-card car-logo bg-gray-50 p-3 rounded-xl text-center cursor-pointer" data-make="bmw">
                                    <img src="https://www.carlogos.org/car-logos/bmw-logo-2020-gray.png" alt="BMW" class="h-8 mx-auto mb-2 object-contain">
                                    <p class="text-xs font-medium">BMW</p>
                                </div>
                                <div class="car-card car-logo bg-gray-50 p-3 rounded-xl text-center cursor-pointer" data-make="mercedes">
                                    <img src="https://www.carlogos.org/car-logos/mercedes-benz-logo-2021-gray.png" alt="Mercedes" class="h-8 mx-auto mb-2 object-contain">
                                    <p class="text-xs font-medium">Mercedes</p>
                                </div>
                            </div>
                            <input id="make-input" type="text" placeholder="Or type manufacturer name" class="form-input w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all" data-en-placeholder="Or type manufacturer name" data-bg-placeholder="Или въведете име на производител">
                            <div id="make-suggestions" class="hidden mt-2 border border-gray-200 rounded-xl bg-white shadow-lg absolute z-10 w-full max-w-md"></div>
                        </div>
                        
                        <div>
                            <label class="block text-gray-700 mb-3 font-medium" data-en="Model" data-bg="Модел">Model</label>
                            <input id="model-input" type="text" placeholder="Enter car model" class="form-input w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all" data-en-placeholder="Enter car model" data-bg-placeholder="Въведете модел на автомобил">
                            <div id="model-suggestions" class="hidden mt-2 border border-gray-200 rounded-xl bg-white shadow-lg absolute z-10 w-full max-w-md"></div>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-gray-700 mb-3 font-medium" data-en="Year" data-bg="Година">Year</label>
                                <input id="year-input" type="number" min="1990" max="2023" placeholder="Manufacturing year" class="form-input w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all" data-en-placeholder="Manufacturing year" data-bg-placeholder="Година на производство">
                            </div>
                            
                            <div>
                                <label class="block text-gray-700 mb-3 font-medium" data-en="Mileage (km)" data-bg="Километри">Mileage (km)</label>
                                <input id="mileage-input" type="number" placeholder="Kilometers" class="form-input w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all" data-en-placeholder="Kilometers" data-bg-placeholder="Километри">
                            </div>
                        </div>
                        
                        <!-- Condition Assessment -->
                        <div>
                            <h3 class="text-lg font-bold text-gray-800 mb-4 flex items-center">
                                <i class="fas fa-clipboard-check mr-2 text-blue-600"></i>
                                <span data-en="Condition Assessment" data-bg="Оценка на състоянието">Condition Assessment</span>
                            </h3>
                            
                            <div class="space-y-5">
                                <div data-rating-type="engine">
                                    <div class="flex justify-between mb-2">
                                        <label class="block text-gray-700 font-medium" data-en="Engine Condition" data-bg="Състояние на двигателя">Engine Condition</label>
                                        <span class="text-sm text-gray-500 rating-label" data-en="(Poor)" data-bg="(лошо)">(Poor)</span>
                                    </div>
                                    <div class="flex items-center justify-between">
                                        <div class="rating-stars flex space-x-1">
                                            <span class="rating-star text-2xl" data-value="1">★</span>
                                            <span class="rating-star text-2xl" data-value="2">★</span>
                                            <span class="rating-star text-2xl" data-value="3">★</span>
                                            <span class="rating-star text-2xl" data-value="4">★</span>
                                            <span class="rating-star text-2xl" data-value="5">★</span>
                                        </div>
                                        <span class="text-sm text-gray-500 rating-value">1/5</span>
                                    </div>
                                </div>
                                
                                <div data-rating-type="transmission">
                                    <div class="flex justify-between mb-2">
                                        <label class="block text-gray-700 font-medium" data-en="Transmission Condition" data-bg="Състояние на скоростната кутия">Transmission Condition</label>
                                        <span class="text-sm text-gray-500 rating-label" data-en="(Poor)" data-bg="(лошо)">(Poor)</span>
                                    </div>
                                    <div class="flex items-center justify-between">
                                        <div class="rating-stars flex space-x-1">
                                            <span class="rating-star text-2xl" data-value="1">★</span>
                                            <span class="rating-star text-2xl" data-value="2">★</span>
                                            <span class="rating-star text-2xl" data-value="3">★</span>
                                            <span class="rating-star text-2xl" data-value="4">★</span>
                                            <span class="rating-star text-2xl" data-value="5">★</span>
                                        </div>
                                        <span class="text-sm text-gray-500 rating-value">1/5</span>
                                    </div>
                                </div>
                                
                                <div data-rating-type="interior">
                                    <div class="flex justify-between mb-2">
                                        <label class="block text-gray-700 font-medium" data-en="Interior Condition" data-bg="Запазеност на интериора">Interior Condition</label>
                                        <span class="text-sm text-gray-500 rating-label" data-en="(Poor)" data-bg="(лошо)">(Poor)</span>
                                    </div>
                                    <div class="flex items-center justify-between">
                                        <div class="rating-stars flex space-x-1">
                                            <span class="rating-star text-2xl" data-value="1">★</span>
                                            <span class="rating-star text-2xl" data-value="2">★</span>
                                            <span class="rating-star text-2xl" data-value="3">★</span>
                                            <span class="rating-star text-2xl" data-value="4">★</span>
                                            <span class="rating-star text-2xl" data-value="5">★</span>
                                        </div>
                                        <span class="text-sm text-gray-500 rating-value">1/5</span>
                                    </div>
                                </div>
                                
                                <div data-rating-type="tires">
                                    <div class="flex justify-between mb-2">
                                        <label class="block text-gray-700 font-medium" data-en="Tire Condition" data-bg="Състояние на гумите">Tire Condition</label>
                                        <span class="text-sm text-gray-500 rating-label" data-en="(Poor)" data-bg="(лошо)">(Poor)</span>
                                    </div>
                                    <div class="flex items-center justify-between">
                                        <div class="rating-stars flex space-x-1">
                                            <span class="rating-star text-2xl" data-value="1">★</span>
                                            <span class="rating-star text-2xl" data-value="2">★</span>
                                            <span class="rating-star text-2xl" data-value="3">★</span>
                                            <span class="rating-star text-2xl" data-value="4">★</span>
                                            <span class="rating-star text-2xl" data-value="5">★</span>
                                        </div>
                                        <span class="text-sm text-gray-500 rating-value">1/5</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Image Upload for AI Analysis -->
                        <div class="pt-4 border-t border-gray-200">
                            <h3 class="text-lg font-bold text-gray-800 mb-4 flex items-center">
                                <i class="fas fa-camera mr-2 text-blue-600"></i>
                                <span data-en="AI Image Analysis" data-bg="Анализ на изображения с изкуствен интелект">AI Image Analysis</span>
                            </h3>
                            <div class="flex space-x-3 mb-3">
                                <div class="image-upload-container border-2 border-dashed border-gray-300 rounded-xl p-4 text-center cursor-pointer w-24 h-24 flex items-center justify-center">
                                    <input type="file" accept="image/*" class="hidden" id="upload-front">
                                    <div>
                                        <i class="fas fa-camera text-gray-400 text-xl mb-1"></i>
                                        <p class="text-xs text-gray-500" data-en="Front" data-bg="Отпред">Front</p>
                                    </div>
                                </div>
                                <div class="image-upload-container border-2 border-dashed border-gray-300 rounded-xl p-4 text-center cursor-pointer w-24 h-24 flex items-center justify-center">
                                    <input type="file" accept="image/*" class="hidden" id="upload-side">
                                    <div>
                                        <i class="fas fa-camera text-gray-400 text-xl mb-1"></i>
                                        <p class="text-xs text-gray-500" data-en="Side" data-bg="Отстрани">Side</p>
                                    </div>
                                </div>
                                <div class="image-upload-container border-2 border-dashed border-gray-300 rounded-xl p-4 text-center cursor-pointer w-24 h-24 flex items-center justify-center">
                                    <input type="file" accept="image/*" class="hidden" id="upload-interior">
                                    <div>
                                        <i class="fas fa-camera text-gray-400 text-xl mb-1"></i>
                                        <p class="text-xs text-gray-500" data-en="Interior" data-bg="Интериор">Interior</p>
                                    </div>
                                </div>
                            </div>
                            <p class="text-xs text-gray-500" data-en="Upload images for AI-powered condition analysis" data-bg="Качете снимки за анализ на състоянието с изкуствен интелект">Upload images for AI-powered condition analysis</p>
                        </div>
                        
                        <button id="evaluate-btn" class="gradient-bg text-white font-semibold px-6 py-4 rounded-xl hover:opacity-90 w-full transition-all duration-300 flex items-center justify-center shadow-md pulse">
                            <i class="fas fa-calculator mr-2"></i>
                            <span data-en="Calculate Price" data-bg="Изчисли цена">Calculate Price</span>
                        </button>
                    </div>
                </div>
                
                <!-- Market Insights -->
                <div class="glass-effect rounded-2xl p-6 floating-element">
                    <h2 class="text-xl font-bold text-gray-800 mb-6 pb-3 border-b border-gray-200 flex items-center">
                        <i class="fas fa-chart-line mr-3 text-blue-600"></i>
                        <span data-en="Market Insights" data-bg="Пазарни прозрения">Market Insights</span>
                    </h2>
                    
                    <div class="space-y-4">
                        <div class="market-insight-card p-4">
                            <div class="flex items-start">
                                <div class="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center mr-3 flex-shrink-0">
                                    <i class="fas fa-arrow-up text-green-600"></i>
                                </div>
                                <div>
                                    <p class="text-sm font-medium text-green-800 mb-1" data-en="SUV Demand Increasing" data-bg="Търсенето на SUV нараства">SUV Demand Increasing</p>
                                    <p class="text-xs text-green-700" data-en="SUV models show 12% higher demand compared to last quarter" data-bg="SUV моделите показват 12% по-високо търсене в сравнение с последното тримесечие">SUV models show 12% higher demand compared to last quarter</p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="ai-prediction-card p-4">
                            <div class="flex items-start">
                                <div class="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center mr-3 flex-shrink-0">
                                    <i class="fas fa-robot text-blue-600"></i>
                                </div>
                                <div>
                                    <p class="text-sm font-medium text-blue-800 mb-1" data-en="AI Price Prediction" data-bg="Прогноза за цени от изкуствен интелект">AI Price Prediction</p>
                                    <p class="text-xs text-blue-700" data-en="Electric vehicles expected to increase in value by 8-10% in next 6 months" data-bg="Очаква се стойността на електромобилите да се увеличи с 8-10% в следващите 6 месеца">Electric vehicles expected to increase in value by 8-10% in next 6 months</p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="bg-yellow-50 p-4 rounded-xl border border-yellow-200">
                            <div class="flex items-start">
                                <div class="h-10 w-10 rounded-full bg-yellow-100 flex items-center justify-center mr-3 flex-shrink-0">
                                    <i class="fas fa-exclamation-triangle text-yellow-600"></i>
                                </div>
                                <div>
                                    <p class="text-sm font-medium text-yellow-800 mb-1" data-en="Market Adjustment" data-bg="Пазарна корекция">Market Adjustment</p>
                                    <p class="text-xs text-yellow-700" data-en="Sedan prices stabilizing after recent increases, good time to buy" data-bg="Цените на седаните се стабилизират след скорошните увеличения, добър момент за покупка">Sedan prices stabilizing after recent increases, good time to buy</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Right Panel - Results and Visualization -->
            <div class="xl:col-span-2">
                <!-- Results Section -->
                <div id="results-section" class="hidden">
                    <!-- Loader -->
                    <div id="loader" class="glass-effect flex justify-center items-center h-96 rounded-2xl shadow">
                        <div class="text-center">
                            <div class="loader mx-auto mb-6"></div>
                            <h3 class="text-xl font-bold text-gray-800 mb-2" data-en="AI Analysis in Progress" data-bg="Анализ с изкуствен интелект в ход">AI Analysis in Progress</h3>
                            <p class="text-gray-600 mb-4" data-en="We're analyzing your car's data and market trends" data-bg="Анализираме данните за вашия автомобил и пазарните тенденции">We're analyzing your car's data and market trends</p>
                            <div class="w-64 h-2 bg-gray-200 rounded-full mx-auto">
                                <div class="h-2 bg-blue-600 rounded-full animate-pulse" style="width: 65%"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Error Message -->
                    <div id="error-message" class="hidden mt-6 p-4 bg-red-100 text-red-700 rounded-xl text-center border border-red-200"></div>
                    
                    <!-- Success Content -->
                    <div id="success-content" class="hidden">
                        <div class="glass-effect rounded-2xl p-6 mb-6 floating-element">
                            <div class="flex justify-between items-center mb-6 pb-4 border-b border-gray-200">
                                <h2 class="text-2xl font-bold text-gray-800 flex items-center">
                                    <i class="fas fa-chart-bar mr-3 text-blue-600"></i>
                                    <span data-en="Evaluation Result" data-bg="Резултат от оценката">Evaluation Result</span>
                                </h2>
                                <div class="flex space-x-2">
                                    <button id="save-result" class="text-blue-600 hover:text-blue-800 flex items-center px-3 py-2 rounded-lg bg-blue-50">
                                        <i class="far fa-bookmark mr-2"></i>
                                        <span data-en="Save" data-bg="Запази">Save</span>
                                    </button>
                                    <button id="export-pdf" class="text-gray-600 hover:text-gray-800 flex items-center px-3 py-2 rounded-lg bg-gray-100">
                                        <i class="fas fa-file-pdf mr-2"></i>
                                        <span data-en="PDF" data-bg="PDF">PDF</span>
                                    </button>
                                    <button id="share-result" class="text-gray-600 hover:text-gray-800 flex items-center px-3 py-2 rounded-lg bg-gray-100">
                                        <i class="fas fa-share-alt mr-2"></i>
                                        <span data-en="Share" data-bg="Сподели">Share</span>
                                    </button>
                                </div>
                            </div>
                            
                            <!-- Visual Display -->
                            <div id="visual-container" class="my-6 h-80 bg-gray-100 rounded-2xl flex items-center justify-center overflow-hidden relative">
                                <div class="absolute top-3 left-3 bg-black bg-opacity-50 text-white px-3 py-1.5 rounded-lg text-sm flex items-center">
                                    <i class="fas fa-arrows-rotate mr-2"></i> 
                                    <span data-en="Drag to rotate" data-bg="Влачете за въртене">Drag to rotate</span>
                                </div>
                                <button id="ar-view" class="absolute top-3 right-3 bg-blue-600 text-white px-3 py-1.5 rounded-lg text-sm flex items-center">
                                    <i class="fas fa-vr-cardboard mr-2"></i> 
                                    <span data-en="AR View" data-bg="AR изглед">AR View</span>
                                </button>
                            </div>

                            <div class="text-center mt-6">
                                <p class="text-gray-600 font-medium" data-en="Estimated Market Value" data-bg="Оценена пазарна стойност">Estimated Market Value</p>
                                <p id="estimated-price" class="text-4xl font-bold text-blue-600 my-3"></p>
                                
                                <div class="bg-blue-50 p-4 rounded-xl mt-5 border border-blue-100">
                                    <div class="grid grid-cols-2 gap-4">
                                        <div>
                                            <span class="text-gray-600 block mb-1" data-en="Price Range:" data-bg="Ценови диапазон:">Price Range:</span>
                                            <span id="price-range" class="font-semibold"></span>
                                        </div>
                                        <div>
                                            <span class="text-gray-600 block mb-1" data-en="Confidence Level:" data-bg="Ниво на доверие:">Confidence Level:</span>
                                            <span id="confidence-level" class="font-semibold"></span>
                                        </div>
                                        <div>
                                            <span class="text-gray-600 block mb-1" data-en="Market Demand:" data-bg="Търсене на пазара:">Market Demand:</span>
                                            <span id="market-demand" class="font-semibold"></span>
                                        </div>
                                        <div>
                                            <span class="text-gray-600 block mb-1" data-en="Investment Potential:" data-bg="Инвестиционен потенциал:">Investment Potential:</span>
                                            <span id="investment-potential" class="font-semibold"></span>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Price Factors -->
                                <div class="mt-6 text-left">
                                    <h3 class="text-lg font-bold text-gray-800 mb-4" data-en="Price Influencing Factors" data-bg="Фактори, влияещи на цената">Price Influencing Factors</h3>
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <div class="bg-green-50 p-4 rounded-xl border border-green-200">
                                            <div class="flex justify-between items-center mb-2">
                                                <span class="text-sm font-medium text-green-800" data-en="Positive Factors" data-bg="Положителни фактори">Positive Factors</span>
                                                <i class="fas fa-arrow-up text-green-600"></i>
                                            </div>
                                            <ul id="positive-factors" class="text-xs text-green-700 space-y-1">
                                                <li class="flex items-center"><i class="fas fa-plus-circle mr-2 text-green-500"></i> <span data-en="Low mileage" data-bg="Ниски километри">Low mileage</span></li>
                                            </ul>
                                        </div>
                                        <div class="bg-red-50 p-4 rounded-xl border border-red-200">
                                            <div class="flex justify-between items-center mb-2">
                                                <span class="text-sm font-medium text-red-800" data-en="Negative Factors" data-bg="Отрицателни фактори">Negative Factors</span>
                                                <i class="fas fa-arrow-down text-red-600"></i>
                                            </div>
                                            <ul id="negative-factors" class="text-xs text-red-700 space-y-1">
                                                <li class="flex items-center"><i class="fas fa-minus-circle mr-2 text-red-500"></i> <span data-en="Minor exterior scratches" data-bg="Леки драскотини на външността">Minor exterior scratches</span></li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Condition Details -->
                                <div class="mt-8 text-left">
                                    <h3 class="text-lg font-bold text-gray-800 mb-4" data-en="Evaluation Details" data-bg="Детайли на оценката">Evaluation Details</h3>
                                    <div class="space-y-4">
                                        <div>
                                            <div class="flex justify-between mb-2">
                                                <span class="text-gray-700" data-en="Engine Condition" data-bg="Състояние на двигателя">Engine Condition</span>
                                                <span id="engine-condition" class="font-semibold"></span>
                                            </div>
                                            <div class="w-full bg-gray-200 rounded-full h-2.5">
                                                <div id="engine-bar" class="condition-bar h-2.5 rounded-full bg-green-500"></div>
                                            </div>
                                        </div>
                                        
                                        <div>
                                            <div class="flex justify-between mb-2">
                                                <span class="text-gray-700" data-en="Transmission Condition" data-bg="Състояние на скоростната кутия">Transmission Condition</span>
                                                <span id="transmission-condition" class="font-semibold"></span>
                                            </div>
                                            <div class="w-full bg-gray-200 rounded-full h-2.5">
                                                <div id="transmission-bar" class="condition-bar h-2.5 rounded-full bg-green-500"></div>
                                            </div>
                                        </div>
                                        
                                        <div>
                                            <div class="flex justify-between mb-2">
                                                <span class="text-gray-700" data-en="Interior Condition" data-bg="Запазеност на интериора">Interior Condition</span>
                                                <span id="interior-condition" class="font-semibold"></span>
                                            </div>
                                            <div class="w-full bg-gray-200 rounded-full h-2.5">
                                                <div id="interior-bar" class="condition-bar h-2.5 rounded-full bg-green-500"></div>
                                            </div>
                                        </div>
                                        
                                        <div>
                                            <div class="flex justify-between mb-2">
                                                <span class="text-gray-700" data-en="Tire Condition" data-bg="Състояние на гумите">Tire Condition</span>
                                                <span id="tires-condition" class="font-semibold"></span>
                                            </div>
                                            <div class="w-full bg-gray-200 rounded-full h-2.5">
                                                <div id="tires-bar" class="condition-bar h-2.5 rounded-full bg-green-500"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Price History Chart -->
                                <div class="mt-8 text-left">
                                    <h3 class="text-lg font-bold text-gray-800 mb-4" data-en="Price History Trend" data-bg="Историческа тенденция на цената">Price History Trend</h3>
                                    <canvas id="price-chart" height="150"></canvas>
                                </div>
                                
                                <div class="mt-6 flex justify-center space-x-4">
                                    <button id="show-details" class="bg-blue-600 text-white px-5 py-2.5 rounded-lg font-medium flex items-center">
                                        <i class="fas fa-info-circle mr-2"></i>
                                        <span data-en="Full Report" data-bg="Пълен отчет">Full Report</span>
                                    </button>
                                    <button id="find-buyers" class="bg-green-600 text-white px-5 py-2.5 rounded-lg font-medium flex items-center">
                                        <i class="fas fa-users mr-2"></i>
                                        <span data-en="Find Buyers" data-bg="Намери купувачи">Find Buyers</span>
                                    </button>
                                    <button id="track-value" class="bg-purple-600 text-white px-5 py-2.5 rounded-lg font-medium flex items-center">
                                        <i class="fas fa-bell mr-2"></i>
                                        <span data-en="Track Value" data-bg="Следи стойност">Track Value</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <!-- AI Recommendations -->
                        <div class="glass-effect rounded-2xl p-6 floating-element">
                            <h2 class="text-xl font-bold text-gray-800 mb-6 pb-3 border-b border-gray-200 flex items-center">
                                <i class="fas fa-lightbulb mr-3 text-yellow-500"></i>
                                <span data-en="AI Recommendations" data-bg="Препоръки на изкуствения интелект">AI Recommendations</span>
                            </h2>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div class="bg-blue-50 p-4 rounded-xl border border-blue-200">
                                    <div class="flex items-start mb-3">
                                        <div class="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center mr-3 flex-shrink-0">
                                            <i class="fas fa-tools text-blue-600"></i>
                                        </div>
                                        <div>
                                            <h4 class="font-semibold text-blue-800" data-en="Maintenance Tips" data-bg="Съвети за поддръжка">Maintenance Tips</h4>
                                        </div>
                                    </div>
                                    <ul class="text-sm text-blue-700 space-y-2">
                                        <li class="flex items-start">
                                            <i class="fas fa-check-circle text-blue-500 mr-2 mt-1"></i>
                                            <span data-en="Consider changing tires in next 3 months" data-bg="Помислете за смяна на гумите в следващите 3 месеца">Consider changing tires in next 3 months</span>
                                        </li>
                                        <li class="flex items-start">
                                            <i class="fas fa-check-circle text-blue-500 mr-2 mt-1"></i>
                                            <span data-en="Engine oil change recommended" data-bg="Препоръчва се смяна на двигателното масло">Engine oil change recommended</span>
                                        </li>
                                    </ul>
                                </div>
                                
                                <div class="bg-green-50 p-4 rounded-xl border border-green-200">
                                    <div class="flex items-start mb-3">
                                        <div class="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center mr-3 flex-shrink-0">
                                            <i class="fas fa-euro-sign text-green-600"></i>
                                        </div>
                                        <div>
                                            <h4 class="font-semibold text-green-800" data-en="Value Optimization" data-bg="Оптимизация на стойността">Value Optimization</h4>
                                        </div>
                                    </div>
                                    <ul class="text-sm text-green-700 space-y-2">
                                        <li class="flex items-start">
                                            <i class="fas fa-check-circle text-green-500 mr-2 mt-1"></i>
                                            <span data-en="Professional detailing could increase value by 3-5%" data-bg="Професионално почистване може да увеличи стойността с 3-5%">Professional detailing could increase value by 3-5%</span>
                                        </li>
                                        <li class="flex items-start">
                                            <i class="fas fa-check-circle text-green-500 mr-2 mt-1"></i>
                                            <span data-en="Sell now to capitalize on current market demand" data-bg="Продавайте сега, за да се възползвате от текущото пазарно търсене">Sell now to capitalize on current market demand</span>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Placeholder before search -->
                <div id="initial-placeholder" class="glass-effect p-8 rounded-2xl shadow-lg text-center floating-element">
                    <div class="mb-6">
                        <svg class="w-24 h-24 mx-auto text-gray-300" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                            <path d="M5 13a2 2 0 012-2h10a2 2 0 012 2v3a2 2 0 01-2 2H7a2 2 0 01-2-2v-3z" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M10 13h4" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M8 7V5a2 2 0 012-2h4a2 2 0 012 2v2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M17 13V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </div>
                    <h3 class="text-xl font-bold text-gray-700 mb-3" data-en="Evaluate your car in a few simple steps" data-bg="Оценка на автомобила ви в няколко лесни стъпки">Evaluate your car in a few simple steps</h3>
                    <p class="text-gray-500 mb-6" data-en="Enter your car details for accurate evaluation and estimated market value" data-bg="Въведете данните за автомобила си за точна оценка и приблизителна пазарна стойност">Enter your car details for accurate evaluation and estimated market value</p>
                    <button class="gradient-bg text-white font-semibold px-6 py-3 rounded-lg hover:opacity-90 transition-all duration-300 flex items-center justify-center mx-auto">
                        <i class="fas fa-play-circle mr-2"></i>
                        <span data-en="Get Started" data-bg="Започнете">Get Started</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-12 mt-12">
        <div class="container mx-auto px-4">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-8">
                <div>
                    <h3 class="text-lg font-bold mb-4 flex items-center">
                        <div class="h-8 w-8 rounded-lg gradient-bg flex items-center justify-center mr-2">
                            <i class="fas fa-car text-white"></i>
                        </div>
                        AutoIntelligence
                    </h3>
                    <p class="text-gray-400 mb-4" data-en="The most advanced AI-powered car valuation platform" data-bg="Най-развитата платформа за оценка на автомобили с изкуствен интелект">The most advanced AI-powered car valuation platform</p>
                    <div class="flex space-x-4">
                        <a href="#" class="text-gray-400 hover:text-white"><i class="fab fa-facebook-f"></i></a>
                        <a href="#" class="text-gray-400 hover:text-white"><i class="fab fa-twitter"></i></a>
                        <a href="#" class="text-gray-400 hover:text-white"><i class="fab fa-linkedin-in"></i></a>
                        <a href="#" class="text-gray-400 hover:text-white"><i class="fab fa-instagram"></i></a>
                    </div>
                </div>
                
                <div>
                    <h4 class="text-md font-semibold mb-4" data-en="Quick Links" data-bg="Бързи връзки">Quick Links</h4>
                    <ul class="space-y-2">
                        <li><a href="#" class="text-gray-400 hover:text-white" data-en="Home" data-bg="Начало">Home</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white" data-en="Car Valuation" data-bg="Оценка на автомобили">Car Valuation</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white" data-en="Market Analysis" data-bg="Пазарен анализ">Market Analysis</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white" data-en="Price Forecast" data-bg="Прогноза за цени">Price Forecast</a></li>
                    </ul>
                </div>
                
                <div>
                    <h4 class="text-md font-semibold mb-4" data-en="Resources" data-bg="Ресурси">Resources</h4>
                    <ul class="space-y-2">
                        <li><a href="#" class="text-gray-400 hover:text-white" data-en="Blog" data-bg="Блог">Blog</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white" data-en="FAQ" data-bg="Често задавани въпроси">FAQ</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white" data-en="Support" data-bg="Поддръжка">Support</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white" data-en="Contact Us" data-bg="Свържете се с нас">Contact Us</a></li>
                    </ul>
                </div>
                
                <div>
                    <h4 class="text-md font-semibold mb-4" data-en="Newsletter" data-bg="Бюлетин">Newsletter</h4>
                    <p class="text-gray-400 mb-4" data-en="Subscribe to get updates on market trends and car values" data-bg="Абонирайте се, за да получавате актуализации за пазарните тенденции и стойностите на автомобилите">Subscribe to get updates on market trends and car values</p>
                    <div class="flex">
                        <input type="email" placeholder="Your email" class="px-4 py-2 rounded-l-lg focus:outline-none w-full text-gray-800" data-en-placeholder="Your email" data-bg-placeholder="Вашият имейл">
                        <button class="bg-blue-600 text-white px-4 rounded-r-lg">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="border-t border-gray-700 mt-8 pt-8 text-center text-gray-400">
                <p>&copy; 2023 AutoIntelligence. <span data-en="All rights reserved" data-bg="Всички права запазени">All rights reserved</span>.</p>
            </div>
        </div>
    </footer>

    <!-- JavaScript Libraries -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        // ===== نظام إدارة الحالة المتقدم =====
        class AppState {
            constructor() {
                this.state = {
                    currentLang: 'en',
                    isDarkMode: false,
                    user: null,
                    carData: {},
                    evaluationHistory: [],
                    marketData: {},
                    aiSuggestions: [],
                    currentCar: null,
                    isAssistantOpen: false
                };
                
                this.init();
            }
            
            init() {
                // تحميل البيانات من localStorage
                const savedState = localStorage.getItem('appState');
                if (savedState) {
                    this.state = {...this.state, ...JSON.parse(savedState)};
                }
                
                // تحميل تاريخ التقييم
                const history = localStorage.getItem('carEvaluationHistory');
                if (history) {
                    this.state.evaluationHistory = JSON.parse(history);
                }
            }
            
            getState() {
                return this.state;
            }
            
            setState(newState) {
                this.state = {...this.state, ...newState};
                this.saveState();
            }
            
            saveState() {
                localStorage.setItem('appState', JSON.stringify(this.state));
            }
            
            addToHistory(evaluation) {
                this.state.evaluationHistory.push(evaluation);
                if (this.state.evaluationHistory.length > 50) {
                    this.state.evaluationHistory.shift();
                }
                localStorage.setItem('carEvaluationHistory', JSON.stringify(this.state.evaluationHistory));
            }
            
            clearHistory() {
                this.state.evaluationHistory = [];
                localStorage.removeItem('carEvaluationHistory');
            }
        }

        // ===== وحدة الذكاء الاصطناعي =====
        class AIModule {
            constructor() {
                this.apiKey = 'mock-api-key-for-demonstration';
                this.baseURL = 'https://api.mockai.com/v1';
            }
            
            async analyzeCarImages(images) {
                // محاكاة تحليل الصور بالذكاء الاصطناعي
                return new Promise((resolve) => {
                    setTimeout(() => {
                        const conditions = {
                            engine: Math.floor(Math.random() * 2) + 4, // 4-5
                            transmission: Math.floor(Math.random() * 2) + 3, // 3-4
                            interior: Math.floor(Math.random() * 2) + 3, // 3-4
                            tires: Math.floor(Math.random() * 2) + 2, // 2-3
                            exterior: Math.floor(Math.random() * 2) + 3 // 3-4
                        };
                        
                        const damageDetected = [
                            'minor_scratches',
                            'wheel_wear',
                            'paint_fading'
                        ];
                        
                        resolve({
                            conditions,
                            damageDetected,
                            confidence: 0.87,
                            suggestions: [
                                'Consider professional detailing to improve exterior appearance',
                                'Tire replacement recommended within next 3-6 months',
                                'No major mechanical issues detected'
                            ]
                        });
                    }, 2000);
                });
            }
            
            async predictMarketTrends(carMake, carModel, period = '6m') {
                // محاكاة تنبؤات السوق
                return new Promise((resolve) => {
                    setTimeout(() => {
                        const trends = {
                            predictedPriceChange: 2.5 + (Math.random() * 4 - 2),
                            demandForecast: 0.7 + (Math.random() * 0.3),
                            bestTimeToSell: 'next_45_days',
                            riskFactors: [
                                'new_model_release',
                                'economic_uncertainty'
                            ],
                            confidence: 0.82
                        };
                        
                        resolve(trends);
                    }, 1500);
                });
            }
            
            async generateSuggestions(carData, conditions, marketData) {
                // محاكاة إنشاء اقتراحات مخصصة
                return new Promise((resolve) => {
                    setTimeout(() => {
                        const suggestions = {
                            maintenance: [
                                'Change engine oil within next 1,000 km',
                                'Check brake pads during next service',
                                'Rotate tires to ensure even wear'
                            ],
                            valueEnhancement: [
                                'Professional detailing could increase value by 3-5%',
                                'Consider replacing worn tires before selling',
                                'Fix minor exterior scratches for better presentation'
                            ],
                            sellingStrategy: [
                                'List in spring for best market response',
                                'Highlight low mileage and service history',
                                'Price competitively based on market analysis'
                            ]
                        };
                        
                        resolve(suggestions);
                    }, 1000);
                });
            }
            
            async chatWithAssistant(message, context) {
                // محاكاة الدردشة مع المساعد بالذكاء الاصطناعي
                return new Promise((resolve) => {
                    setTimeout(() => {
                        const responses = [
                            "Based on current market data, I recommend pricing your vehicle between €24,000 and €26,000 for a quick sale.",
                            "The demand for SUVs like yours has increased by 12% in the last quarter. It's a good time to sell.",
                            "Your vehicle's condition is rated above average for its age. This could increase its value by approximately 5-7%.",
                            "I suggest getting a professional inspection to verify the transmission condition, as this could significantly impact the value.",
                            "Considering your mileage and service history, your car is in the top 30% of similar models on the market."
                        ];
                        
                        resolve({
                            response: responses[Math.floor(Math.random() * responses.length)],
                            suggestions: [
                                'Get a pre-sale inspection',
                                'Consider professional detailing',
                                'Check competitive listings in your area'
                            ],
                            confidence: 0.89
                        });
                    }, 1200);
                });
            }
        }

        // ===== وحدة التصور والرسومات =====
        class VisualizationModule {
            constructor() {
                this.scene = null;
                this.camera = null;
                this.renderer = null;
                this.controls = null;
                this.model = null;
            }
            
            init3DViewer(containerId, modelUrl) {
                const container = document.getElementById(containerId);
                if (!container) return;
                
                // 1. Scene
                this.scene = new THREE.Scene();
                this.scene.background = new THREE.Color(0xf0f0f0);
                this.scene.fog = new THREE.Fog(0xf0f0f0, 20, 100);
                
                // 2. Camera
                this.camera = new THREE.PerspectiveCamera(45, container.clientWidth / container.clientHeight, 0.1, 1000);
                this.camera.position.set(5, 2, 8);
                
                // 3. Renderer
                this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
                this.renderer.setSize(container.clientWidth, container.clientHeight);
                this.renderer.setPixelRatio(window.devicePixelRatio);
                this.renderer.shadowMap.enabled = true;
                this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
                
                const canvas = this.renderer.domElement;
                canvas.id = "interactive-canvas";
                container.innerHTML = '';
                container.appendChild(canvas);
                
                // 4. Lights
                const ambientLight = new THREE.AmbientLight(0x404040, 1);
                this.scene.add(ambientLight);
                
                const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
                directionalLight.position.set(5, 10, 7.5);
                directionalLight.castShadow = true;
                directionalLight.shadow.camera.near = 0.5;
                directionalLight.shadow.camera.far = 500;
                directionalLight.shadow.camera.left = -10;
                directionalLight.shadow.camera.right = 10;
                directionalLight.shadow.camera.top = 10;
                directionalLight.shadow.camera.bottom = -10;
                this.scene.add(directionalLight);
                
                const hemisphereLight = new THREE.HemisphereLight(0xffffff, 0x444444, 0.6);
                hemisphereLight.position.set(0, 20, 0);
                this.scene.add(hemisphereLight);
                
                // 5. Ground
                const groundGeometry = new THREE.PlaneGeometry(2000, 2000);
                const groundMaterial = new THREE.MeshPhongMaterial({ color: 0xbbbbbb, depthWrite: false });
                const ground = new THREE.Mesh(groundGeometry, groundMaterial);
                ground.rotation.x = -Math.PI / 2;
                ground.receiveShadow = true;
                this.scene.add(ground);
                
                const gridHelper = new THREE.GridHelper(2000, 20, 0x000000, 0x000000);
                gridHelper.material.opacity = 0.2;
                gridHelper.material.transparent = true;
                this.scene.add(gridHelper);
                
                // 6. Controls
                this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);
                this.controls.enableDamping = true;
                this.controls.dampingFactor = 0.05;
                this.controls.screenSpacePanning = false;
                this.controls.minDistance = 3;
                this.controls.maxDistance = 20;
                this.controls.maxPolarAngle = Math.PI / 2;
                this.controls.target.set(0, 1, 0);
                
                // 7. Load model
                this.loadModel(modelUrl);
                
                // 8. Animation loop
                this.animate();
                
                // 9. Handle window resize
                window.addEventListener('resize', () => this.onWindowResize(containerId), false);
            }
            
            loadModel(modelUrl) {
                const loader = new THREE.GLTFLoader();
                
                loader.load(modelUrl, (gltf) => {
                    this.model = gltf.scene;
                    
                    // Scale and position model
                    this.model.scale.set(1, 1, 1);
                    this.model.position.y = 0;
                    
                    // Enable shadows for all meshes
                    this.model.traverse((node) => {
                        if (node.isMesh) {
                            node.castShadow = true;
                            node.receiveShadow = true;
                        }
                    });
                    
                    this.scene.add(this.model);
                    
                    // Add some environmental elements
                    this.addEnvironment();
                    
                }, undefined, (error) => {
                    console.error('Error loading model:', error);
                    this.showError('Failed to load 3D model. Using fallback visualization.');
                    this.createFallbackModel();
                });
            }
            
            addEnvironment() {
                // Add some environmental elements for better visualization
                const cubeGeometry = new THREE.BoxGeometry(2, 2, 2);
                const cubeMaterial = new THREE.MeshStandardMaterial({ color: 0x3b82f6, metalness: 0.7, roughness: 0.3 });
                const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
                cube.position.set(5, 1, 0);
                cube.castShadow = true;
                cube.receiveShadow = true;
                this.scene.add(cube);
                
                const sphereGeometry = new THREE.SphereGeometry(1.5, 32, 32);
                const sphereMaterial = new THREE.MeshStandardMaterial({ color: 0xef4444, metalness: 0.5, roughness: 0.5 });
                const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
                sphere.position.set(-5, 1.5, 0);
                sphere.castShadow = true;
                sphere.receiveShadow = true;
                this.scene.add(sphere);
            }
            
            createFallbackModel() {
                // Create a simple fallback model if loading fails
                const geometry = new THREE.BoxGeometry(3, 2, 5);
                const material = new THREE.MeshStandardMaterial({ 
                    color: 0x3b82f6,
                    metalness: 0.7,
                    roughness: 0.3,
                    envMapIntensity: 0.5
                });
                
                this.model = new THREE.Mesh(geometry, material);
                this.model.position.y = 1.5;
                this.model.castShadow = true;
                this.model.receiveShadow = true;
                
                this.scene.add(this.model);
                
                // Add wheels
                const wheelGeometry = new THREE.CylinderGeometry(0.5, 0.5, 0.4, 16);
                const wheelMaterial = new THREE.MeshStandardMaterial({ color: 0x1f2937 });
                
                for (let i = 0; i < 4; i++) {
                    const wheel = new THREE.Mesh(wheelGeometry, wheelMaterial);
                    wheel.rotation.z = Math.PI / 2;
                    
                    if (i < 2) {
                        wheel.position.set(-1.2, 0.5, i * 3 - 1.5);
                    } else {
                        wheel.position.set(1.2, 0.5, (i-2) * 3 - 1.5);
                    }
                    
                    wheel.castShadow = true;
                    wheel.receiveShadow = true;
                    this.scene.add(wheel);
                }
            }
            
            animate() {
                requestAnimationFrame(() => this.animate());
                
                if (this.model) {
                    // Add subtle animation to the model
                    this.model.rotation.y += 0.005;
                }
                
                if (this.controls) {
                    this.controls.update();
                }
                
                if (this.renderer && this.scene && this.camera) {
                    this.renderer.render(this.scene, this.camera);
                }
            }
            
            onWindowResize(containerId) {
                const container = document.getElementById(containerId);
                if (!container || !this.camera || !this.renderer) return;
                
                this.camera.aspect = container.clientWidth / container.clientHeight;
                this.camera.updateProjectionMatrix();
                this.renderer.setSize(container.clientWidth, container.clientHeight);
            }
            
            showError(message) {
                const errorDiv = document.createElement('div');
                errorDiv.style.position = 'absolute';
                errorDiv.style.top = '10px';
                errorDiv.style.left = '10px';
                errorDiv.style.background = 'rgba(239, 68, 68, 0.8)';
                errorDiv.style.color = 'white';
                errorDiv.style.padding = '10px';
                errorDiv.style.borderRadius = '5px';
                errorDiv.style.zIndex = '1000';
                errorDiv.textContent = message;
                
                const container = document.getElementById('visual-container');
                if (container) {
                    container.appendChild(errorDiv);
                    
                    setTimeout(() => {
                        container.removeChild(errorDiv);
                    }, 5000);
                }
            }
            
            createPriceChart(canvasId, data, options = {}) {
                const ctx = document.getElementById(canvasId).getContext('2d');
                
                const defaultOptions = {
                    type: 'line',
                    data: {
                        labels: data.labels || [],
                        datasets: [{
                            label: data.label || 'Price Trend',
                            data: data.values || [],
                            borderColor: '#3b82f6',
                            backgroundColor: 'rgba(59, 130, 246, 0.1)',
                            fill: true,
                            tension: 0.4,
                            pointBackgroundColor: '#3b82f6',
                            pointBorderColor: '#ffffff',
                            pointBorderWidth: 2,
                            pointRadius: 4,
                            pointHoverRadius: 6
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                mode: 'index',
                                intersect: false,
                                backgroundColor: 'rgba(31, 41, 55, 0.9)',
                                titleFont: {
                                    size: 14,
                                    weight: 'bold'
                                },
                                bodyFont: {
                                    size: 13
                                },
                                padding: 10,
                                cornerRadius: 8,
                                callbacks: {
                                    label: function(context) {
                                        return `€${context.raw.toLocaleString()}`;
                                    }
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: false,
                                grid: {
                                    drawBorder: false,
                                    color: 'rgba(0, 0, 0, 0.1)'
                                },
                                ticks: {
                                    callback: function(value) {
                                        return '€' + value.toLocaleString();
                                    },
                                    font: {
                                        size: 11
                                    }
                                }
                            },
                            x: {
                                grid: {
                                    display: false
                                },
                                ticks: {
                                    font: {
                                        size: 11
                                    }
                                }
                            }
                        },
                        interaction: {
                            mode: 'nearest',
                            axis: 'x',
                            intersect: false
                        },
                        animations: {
                            tension: {
                                duration: 1000,
                                easing: 'linear'
                            }
                        }
                    }
                };
                
                const config = {...defaultOptions, ...options};
                return new Chart(ctx, config);
            }
            
            createMarketTrendsChart(canvasId, data) {
                return this.createPriceChart(canvasId, data, {
                    type: 'line',
                    data: {
                        labels: data.labels,
                        datasets: [
                            {
                                label: 'Market Average',
                                data: data.values,
                                borderColor: '#10b981',
                                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                                fill: true,
                                tension: 0.4
                            },
                            {
                                label: 'Your Car',
                                data: data.comparisonValues,
                                borderColor: '#3b82f6',
                                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                                fill: true,
                                tension: 0.4,
                                borderDash: [5, 5]
                            }
                        ]
                    }
                });
            }
        }

        // ===== تطبيق الرئيسي =====
        class CarValuationApp {
            constructor() {
                this.stateManager = new AppState();
                this.aiModule = new AIModule();
                this.visualizationModule = new VisualizationModule();
                
                this.currentLang = 'en';
                this.isDarkMode = false;
                
                this.initializeApp();
            }
            
            initializeApp() {
                this.setupEventListeners();
                this.loadInitialData();
                this.setupLanguage();
                this.setupTheme();
                
                // Show welcome message
                setTimeout(() => {
                    this.showNotification(
                        this.currentLang === 'en' 
                            ? 'Welcome to AutoIntelligence! Start by entering your car details.' 
                            : 'Добре дошли в AutoIntelligence! Започнете, като въведете данните за автомобила си.',
                        'success'
                    );
                }, 1000);
            }
            
            setupEventListeners() {
                // Setup all event listeners for the application
                this.setupLanguageToggle();
                this.setupThemeToggle();
                this.setupCarLogoSelection();
                this.setupRatingStars();
                this.setupEvaluationButton();
                this.setupAssistant();
                this.setupImageUpload();
                this.setupFormSuggestions();
            }
            
            setupLanguageToggle() {
                const langEnBtn = document.getElementById('lang-en');
                const langBgBtn = document.getElementById('lang-bg');
                
                if (langEnBtn && langBgBtn) {
                    langEnBtn.addEventListener('click', () => this.changeLanguage('en'));
                    langBgBtn.addEventListener('click', () => this.changeLanguage('bg'));
                }
            }
            
            setupThemeToggle() {
                const themeToggle = document.getElementById('theme-toggle');
                
                if (themeToggle) {
                    themeToggle.addEventListener('click', () => {
                        this.toggleTheme();
                    });
                }
            }
            
            setupCarLogoSelection() {
                const carLogos = document.querySelectorAll('.car-logo');
                
                carLogos.forEach(logo => {
                    logo.addEventListener('click', () => {
                        const make = logo.getAttribute('data-make');
                        this.selectCarMake(make);
                    });
                });
            }
            
            setupRatingStars() {
                const ratingStars = document.querySelectorAll('.rating-star');
                
                ratingStars.forEach(star => {
                    star.addEventListener('click', () => {
                        const value = parseInt(star.getAttribute('data-value'));
                        const container = star.closest('.rating-stars');
                        const ratingType = container.closest('[data-rating-type]').getAttribute('data-rating-type');
                        
                        this.setRatingValue(ratingType, value);
                    });
                });
            }
            
            setupEvaluationButton() {
                const evaluateBtn = document.getElementById('evaluate-btn');
                
                if (evaluateBtn) {
                    evaluateBtn.addEventListener('click', () => {
                        this.evaluateCar();
                    });
                }
            }
            
            setupAssistant() {
                const openAssistantBtn = document.getElementById('open-assistant');
                const minimizeAssistantBtn = document.getElementById('minimize-assistant');
                const sendMessageBtn = document.getElementById('send-assistant-message');
                const assistantInput = document.getElementById('assistant-input');
                
                if (openAssistantBtn) {
                    openAssistantBtn.addEventListener('click', () => {
                        this.toggleAssistant();
                    });
                }
                
                if (minimizeAssistantBtn) {
                    minimizeAssistantBtn.addEventListener('click', () => {
                        this.toggleAssistant();
                    });
                }
                
                if (sendMessageBtn && assistantInput) {
                    const sendMessage = () => {
                        const message = assistantInput.value.trim();
                        if (message) {
                            this.sendAssistantMessage(message);
                            assistantInput.value = '';
                        }
                    };
                    
                    sendMessageBtn.addEventListener('click', sendMessage);
                    assistantInput.addEventListener('keypress', (e) => {
                        if (e.key === 'Enter') {
                            sendMessage();
                        }
                    });
                }
            }
            
            setupImageUpload() {
                const uploadContainers = document.querySelectorAll('.image-upload-container');
                
                uploadContainers.forEach(container => {
                    const input = container.querySelector('input[type="file"]');
                    
                    container.addEventListener('click', () => {
                        input.click();
                    });
                    
                    input.addEventListener('change', (e) => {
                        if (e.target.files && e.target.files[0]) {
                            this.handleImageUpload(e.target.files[0], container);
                        }
                    });
                });
            }
            
            setupFormSuggestions() {
                const makeInput = document.getElementById('make-input');
                const modelInput = document.getElementById('model-input');
                
                if (makeInput) {
                    makeInput.addEventListener('input', (e) => {
                        this.showMakeSuggestions(e.target.value);
                    });
                }
                
                if (modelInput) {
                    modelInput.addEventListener('input', (e) => {
                        this.showModelSuggestions(e.target.value);
                    });
                }
            }
            
            async loadInitialData() {
                // Load initial data for the application
                try {
                    // Simulate loading market data
                    const marketData = await this.loadMarketData();
                    this.stateManager.setState({ marketData });
                    
                    // Load car database
                    const carData = await this.loadCarDatabase();
                    this.stateManager.setState({ carData });
                    
                } catch (error) {
                    console.error('Error loading initial data:', error);
                    this.showNotification(
                        this.currentLang === 'en' 
                            ? 'Failed to load initial data. Please check your connection.' 
                            : 'Неуспешно зареждане на първоначалните данни. Моля, проверете връзката си.',
                        'error'
                    );
                }
            }
            
            async loadMarketData() {
                // Simulate API call to load market data
                return new Promise((resolve) => {
                    setTimeout(() => {
                        resolve({
                            averagePrices: {
                                suv: 32500,
                                sedan: 24500,
                                hatchback: 18500,
                                electric: 42500
                            },
                            trends: {
                                suv: 12.4,
                                sedan: -2.1,
                                hatchback: 3.7,
                                electric: 18.9
                            },
                            demandIndex: 86.5,
                            marketActivity: 72.3
                        });
                    }, 1500);
                });
            }
            
            async loadCarDatabase() {
                // Simulate loading car database
                return new Promise((resolve) => {
                    setTimeout(() => {
                        resolve({
                            toyota: {
                                name: "Toyota",
                                models: [
                                    { name: "Camry", years: [2018, 2019, 2020, 2021, 2022, 2023] },
                                    { name: "Corolla", years: [2018, 2019, 2020, 2021, 2022, 2023] },
                                    { name: "RAV4", years: [2018, 2019, 2020, 2021, 2022, 2023] },
                                    { name: "Land Cruiser", years: [2018, 2019, 2020, 2021, 2022, 2023] }
                                ],
                                image: 'https://www.carlogos.org/car-logos/toyota-logo-2020-gray.png',
                                popularity: 0.85,
                                reliability: 0.9
                            },
                            bmw: {
                                name: "BMW",
                                models: [
                                    { name: "X5", years: [2018, 2019, 2020, 2021, 2022, 2023] },
                                    { name: "X6", years: [2018, 2019, 2020, 2021, 2022, 2023] },
                                    { name: "Series 3", years: [2018, 2019, 2020, 2021, 2022, 2023] },
                                    { name: "Series 5", years: [2018, 2019, 2020, 2021, 2022, 2023] }
                                ],
                                image: 'https://www.carlogos.org/car-logos/bmw-logo-2020-gray.png',
                                popularity: 0.78,
                                reliability: 0.82
                            },
                            mercedes: {
                                name: "Mercedes-Benz",
                                models: [
                                    { name: "C-Class", years: [2018, 2019, 2020, 2021, 2022, 2023] },
                                    { name: "E-Class", years: [2018, 2019, 2020, 2021, 2022, 2023] },
                                    { name: "S-Class", years: [2018, 2019, 2020, 2021, 2022, 2023] },
                                    { name: "GLC", years: [2018, 2019, 2020, 2021, 2022, 2023] }
                                ],
                                image: 'https://www.carlogos.org/car-logos/mercedes-benz-logo-2021-gray.png',
                                popularity: 0.8,
                                reliability: 0.85
                            }
                        });
                    }, 1000);
                });
            }
            
            changeLanguage(lang) {
                this.currentLang = lang;
                this.stateManager.setState({ currentLang: lang });
                
                // Update UI elements based on language
                this.updateLanguageUI();
                
                // Show notification
                this.showNotification(
                    lang === 'en' 
                        ? 'Language changed to English' 
                        : 'Езикът е променен на български',
                    'success'
                );
            }
            
            updateLanguageUI() {
                // Update all elements with data attributes
                document.querySelectorAll('[data-en], [data-bg]').forEach(element => {
                    if (this.currentLang === 'en' && element.hasAttribute('data-en')) {
                        if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                            element.placeholder = element.getAttribute('data-en-placeholder') || element.getAttribute('data-en');
                        } else {
                            element.textContent = element.getAttribute('data-en');
                        }
                    } else if (this.currentLang === 'bg' && element.hasAttribute('data-bg')) {
                        if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                            element.placeholder = element.getAttribute('data-bg-placeholder') || element.getAttribute('data-bg');
                        } else {
                            element.textContent = element.getAttribute('data-bg');
                        }
                    }
                });
                
                // Update button styles
                document.querySelectorAll('.lang-btn').forEach(btn => {
                    btn.classList.remove('bg-white', 'text-blue-600', 'bg-transparent', 'text-gray-700');
                });
                
                const langEnBtn = document.getElementById('lang-en');
                const langBgBtn = document.getElementById('lang-bg');
                
                if (this.currentLang === 'en') {
                    langEnBtn.classList.add('bg-white', 'text-blue-600');
                    langBgBtn.classList.add('bg-transparent', 'text-gray-700');
                } else {
                    langEnBtn.classList.add('bg-transparent', 'text-gray-700');
                    langBgBtn.classList.add('bg-white', 'text-blue-600');
                }
            }
            
            toggleTheme() {
                this.isDarkMode = !this.isDarkMode;
                this.stateManager.setState({ isDarkMode: this.isDarkMode });
                
                if (this.isDarkMode) {
                    document.body.classList.add('dark-mode');
                    document.querySelectorAll('.glass-effect').forEach(el => {
                        el.classList.add('dark-card');
                    });
                    document.getElementById('theme-toggle').innerHTML = '<i class="fas fa-sun text-yellow-400"></i>';
                } else {
                    document.body.classList.remove('dark-mode');
                    document.querySelectorAll('.glass-effect').forEach(el => {
                        el.classList.remove('dark-card');
                    });
                    document.getElementById('theme-toggle').innerHTML = '<i class="fas fa-moon text-gray-700"></i>';
                }
            }
            
            setupTheme() {
                const prefersDarkScheme = window.matchMedia('(prefers-color-scheme: dark)');
                this.isDarkMode = prefersDarkScheme.matches;
                this.stateManager.setState({ isDarkMode: this.isDarkMode });
                
                if (this.isDarkMode) {
                    document.body.classList.add('dark-mode');
                    document.querySelectorAll('.glass-effect').forEach(el => {
                        el.classList.add('dark-card');
                    });
                    document.getElementById('theme-toggle').innerHTML = '<i class="fas fa-sun text-yellow-400"></i>';
                }
            }
            
            selectCarMake(make) {
                const makeInput = document.getElementById('make-input');
                if (makeInput) {
                    const carData = this.stateManager.getState().carData;
                    if (carData[make]) {
                        makeInput.value = carData[make].name;
                    }
                }
                
                // Show models for this make
                this.showModelSuggestionsForMake(make);
            }
            
            setRatingValue(type, value) {
                const container = document.querySelector(`[data-rating-type="${type}"]`);
                if (!container) return;
                
                // Reset all stars in this group
                container.querySelectorAll('.rating-star').forEach(star => {
                    star.classList.remove('active');
                });
                
                // Activate stars up to the clicked value
                container.querySelectorAll('.rating-star').forEach(star => {
                    if (parseInt(star.getAttribute('data-value')) <= value) {
                        star.classList.add('active');
                    }
                });
                
                // Update rating value text
                const ratingValueElement = container.querySelector('.rating-value');
                if (ratingValueElement) {
                    ratingValueElement.textContent = `${value}/5`;
                }
                
                // Update rating label
                const ratingLabel = container.querySelector('.rating-label');
                const ratingLabels = {
                    en: ["(Poor)", "(Fair)", "(Good)", "(Very Good)", "(Excellent)"],
                    bg: ["(Лошо)", "(Задоволително)", "(Добро)", "(Много добро)", "(Отлично)"]
                };
                
                if (ratingLabel) {
                    ratingLabel.textContent = ratingLabels[this.currentLang][value - 1];
                }
                
                // Generate AI suggestions based on new ratings
                this.generateAISuggestions();
            }
            
            async evaluateCar() {
                const make = document.getElementById('make-input').value;
                const model = document.getElementById('model-input').value;
                const year = document.getElementById('year-input').value;
                const mileage = document.getElementById('mileage-input').value;
                
                if (!make || !model) {
                    this.showNotification(
                        this.currentLang === 'en' 
                            ? 'Please enter manufacturer and model.' 
                            : 'Моля, въведете марка и модел.',
                        'error'
                    );
                    return;
                }
                
                // Get condition ratings
                const conditions = {
                    engine: this.getRatingValue('engine'),
                    transmission: this.getRatingValue('transmission'),
                    interior: this.getRatingValue('interior'),
                    tires: this.getRatingValue('tires')
                };
                
                // Show loader
                this.showLoader();
                
                try {
                    // Simulate API call to evaluate car
                    const result = await this.mockApiService(make, model, year, mileage, conditions);
                    
                    // Display results
                    this.displayResults(result);
                    
                    // Add to history
                    this.addToHistory(make, model, year, mileage, result);
                    
                } catch (error) {
                    this.showError(error);
                }
            }
            
            async mockApiService(make, model, year, mileage, conditions) {
                // Simulate API call with delay
                return new Promise((resolve, reject) => {
                    setTimeout(() => {
                        const lowerMake = make.toLowerCase().trim();
                        const lowerModel = model.toLowerCase().trim();
                        
                        // Simulate occasional server error
                        if (Math.random() < 0.05) {
                            reject(
                                this.currentLang === 'en' 
                                    ? "Server error. Please try again." 
                                    : "Сървърна грешка. Моля, опитайте отново."
                            );
                            return;
                        }
                        
                        // Check for known cars and return appropriate results
                        if ((lowerMake.includes('toyota') || lowerMake.includes('bmw') || lowerMake.includes('mercedes')) && 
                            (lowerModel.includes('camry') || lowerModel.includes('x5') || lowerModel.includes('c-class'))) {
                            
                            const basePrice = this.calculateBasePrice(lowerMake, lowerModel, year);
                            const conditionMultiplier = this.calculateConditionMultiplier(conditions);
                            const mileageMultiplier = this.calculateMileageMultiplier(mileage);
                            const yearMultiplier = this.calculateYearMultiplier(year);
                            
                            const estimatedPrice = Math.round(basePrice * conditionMultiplier * mileageMultiplier * yearMultiplier);
                            const priceRange = [
                                Math.round(estimatedPrice * 0.9),
                                Math.round(estimatedPrice * 1.1)
                            ];
                            
                            const confidence = this.calculateConfidence(lowerMake, lowerModel);
                            const marketDemand = this.calculateMarketDemand(lowerMake);
                            
                            resolve({
                                estimated_price: estimatedPrice,
                                price_range: priceRange,
                                confidence: confidence.text,
                                confidence_level: confidence.level,
                                market_demand: marketDemand.text,
                                demand_level: marketDemand.level,
                                investment_potential: this.calculateInvestmentPotential(lowerMake, lowerModel),
                                visual: {
                                    type: "3d",
                                    url: "https://cdn.jsdelivr.net/gh/KhronosGroup/glTF-Sample-Models/2.0/Duck/glTF/Duck.gltf"
                                },
                                conditions: {
                                    engine: conditions.engine || 4,
                                    transmission: conditions.transmission || 4,
                                    interior: conditions.interior || 3,
                                    tires: conditions.tires || 4
                                },
                                positive_factors: this.generatePositiveFactors(conditions, mileage, year),
                                negative_factors: this.generateNegativeFactors(conditions, mileage, year),
                                price_history: this.generatePriceHistory(estimatedPrice)
                            });
                        } else {
                            reject(
                                this.currentLang === 'en' 
                                    ? "Not enough data found for this car. Please try another one." 
                                    : "Няма достатъчно данни за този автомобил. Моля, опитайте с друг автомобил."
                            );
                        }
                    }, 2000);
                });
            }
            
            calculateBasePrice(make, model, year) {
                // Base prices for different models
                const priceMap = {
                    toyota: {
                        camry: 25000,
                        corolla: 20000,
                        rav4: 30000,
                        landcruiser: 65000
                    },
                    bmw: {
                        x5: 65000,
                        x6: 75000,
                        series3: 45000,
                        series5: 55000
                    },
                    mercedes: {
                        cclass: 45000,
                        eclass: 60000,
                        sclass: 95000,
                        glc: 50000
                    }
                };
                
                const makeKey = make.includes('toyota') ? 'toyota' : 
                               make.includes('bmw') ? 'bmw' : 
                               make.includes('mercedes') ? 'mercedes' : 'toyota';
                               
                const modelKey = model.toLowerCase().replace(/\s+/g, '');
                
                return priceMap[makeKey] && priceMap[makeKey][modelKey] ? priceMap[makeKey][modelKey] : 30000;
            }
            
            calculateConditionMultiplier(conditions) {
                const total = conditions.engine + conditions.transmission + conditions.interior + conditions.tires;
                return 0.7 + (total / 20); // Returns value between 0.9 and 1.1
            }
            
            calculateMileageMultiplier(mileage) {
                if (!mileage) return 1;
                const km = parseInt(mileage);
                if (km < 10000) return 1.1;
                if (km < 50000) return 1.0;
                if (km < 100000) return 0.9;
                if (km < 150000) return 0.8;
                return 0.7;
            }
            
            calculateYearMultiplier(year) {
                if (!year) return 1;
                const currentYear = new Date().getFullYear();
                const age = currentYear - parseInt(year);
                if (age <= 1) return 1.0;
                if (age <= 3) return 0.9;
                if (age <= 5) return 0.8;
                if (age <= 7) return 0.7;
                return 0.6;
            }
            
            calculateConfidence(make, model) {
                const carData = this.stateManager.getState().carData;
                if (carData[make] && carData[make].models.some(m => m.name.toLowerCase() === model.toLowerCase())) {
                    return {
                        text: this.currentLang === 'en' ? "High" : "Висока",
                        level: "high"
                    };
                }
                return {
                    text: this.currentLang === 'en' ? "Medium" : "Средна",
                    level: "medium"
                };
            }
            
            calculateMarketDemand(make) {
                const carData = this.stateManager.getState().carData;
                if (carData[make]) {
                    if (carData[make].popularity > 0.8) {
                        return {
                            text: this.currentLang === 'en' ? "High" : "Висока",
                            level: "high"
                        };
                    } else if (carData[make].popularity > 0.6) {
                        return {
                            text: this.currentLang === 'en' ? "Medium" : "Средна",
                            level: "medium"
                        };
                    }
                }
                return {
                    text: this.currentLang === 'en' ? "Low" : "Ниска",
                    level: "low"
                };
            }
            
            calculateInvestmentPotential(make, model) {
                // Simple algorithm to calculate investment potential
                const carData = this.stateManager.getState().carData;
                let score = 50; // Base score
                
                if (carData[make]) {
                    score += carData[make].popularity * 20;
                    score += carData[make].reliability * 30;
                }
                
                if (model.includes('x5') || model.includes('x6') || model.includes('rav4')) {
                    score += 15; // SUVs have higher investment potential
                }
                
                if (score > 80) return this.currentLang === 'en' ? "Excellent" : "Отличен";
                if (score > 60) return this.currentLang === 'en' ? "Good" : "Добър";
                if (score > 40) return this.currentLang === 'en' ? "Fair" : "Задоволителен";
                return this.currentLang === 'en' ? "Poor" : "Слаб";
            }
            
            generatePositiveFactors(conditions, mileage, year) {
                const factors = [];
                
                if (conditions.engine >= 4) {
                    factors.push(this.currentLang === 'en' ? "Excellent engine condition" : "Отлично състояние на двигателя");
                }
                
                if (conditions.interior >= 4) {
                    factors.push(this.currentLang === 'en' ? "Well-maintained interior" : "Добре поддържан интериор");
                }
                
                if (mileage && parseInt(mileage) < 50000) {
                    factors.push(this.currentLang === 'en' ? "Low mileage" : "Ниски километри");
                }
                
                if (year && (new Date().getFullYear() - parseInt(year)) <= 3) {
                    factors.push(this.currentLang === 'en' ? "Recent model" : "Скорошен модел");
                }
                
                return factors.length > 0 ? factors : [this.currentLang === 'en' ? "No significant positive factors" : "Няма значителни положителни фактори"];
            }
            
            generateNegativeFactors(conditions, mileage, year) {
                const factors = [];
                
                if (conditions.engine < 3) {
                    factors.push(this.currentLang === 'en' ? "Engine requires attention" : "Двигателят изисква внимание");
                }
                
                if (conditions.tires < 3) {
                    factors.push(this.currentLang === 'en' ? "Worn tires" : "Износени гуми");
                }
                
                if (mileage && parseInt(mileage) > 150000) {
                    factors.push(this.currentLang === 'en' ? "High mileage" : "Високи километри");
                }
                
                if (year && (new Date().getFullYear() - parseInt(year)) > 10) {
                    factors.push(this.currentLang === 'en' ? "Aged vehicle" : "Остарял автомобил");
                }
                
                return factors.length > 0 ? factors : [this.currentLang === 'en' ? "No significant negative factors" : "Няма значителни отрицателни фактори"];
            }
            
            generatePriceHistory(basePrice) {
                const history = [];
                const currentDate = new Date();
                
                for (let i = 6; i >= 0; i--) {
                    const date = new Date(currentDate);
                    date.setMonth(date.getMonth() - i);
                    
                    // Simulate price fluctuations (±5%)
                    const fluctuation = 1 + (Math.random() * 0.1 - 0.05);
                    const price = Math.round(basePrice * fluctuation);
                    
                    history.push({
                        date: date.toLocaleDateString(this.currentLang === 'en' ? 'en-US' : 'bg-BG', { month: 'short', year: 'numeric' }),
                        price: price
                    });
                }
                
                return history;
            }
            
            showLoader() {
                const resultsSection = document.getElementById('results-section');
                const loader = document.getElementById('loader');
                const initialPlaceholder = document.getElementById('initial-placeholder');
                const successContent = document.getElementById('success-content');
                const errorMessage = document.getElementById('error-message');
                
                if (resultsSection && loader && initialPlaceholder && successContent && errorMessage) {
                    initialPlaceholder.classList.add('hidden');
                    resultsSection.classList.remove('hidden');
                    loader.classList.remove('hidden');
                    successContent.classList.add('hidden');
                    errorMessage.classList.add('hidden');
                }
            }
            
            displayResults(result) {
                const loader = document.getElementById('loader');
                const successContent = document.getElementById('success-content');
                
                if (loader && successContent) {
                    loader.classList.add('hidden');
                    successContent.classList.remove('hidden');
                    
                    // Populate result data
                    document.getElementById('estimated-price').textContent = `€${result.estimated_price.toLocaleString()}`;
                    document.getElementById('price-range').textContent = `€${result.price_range[0].toLocaleString()} - €${result.price_range[1].toLocaleString()}`;
                    document.getElementById('confidence-level').textContent = result.confidence;
                    document.getElementById('market-demand').textContent = result.market_demand;
                    document.getElementById('investment-potential').textContent = result.investment_potential;
                    
                    // Add confidence indicator
                    const confidenceLevel = document.getElementById('confidence-level');
                    confidenceLevel.classList.remove('text-green-600', 'text-yellow-600', 'text-red-600');
                    
                    if (result.confidence_level === 'high') {
                        confidenceLevel.classList.add('text-green-600');
                    } else if (result.confidence_level === 'medium') {
                        confidenceLevel.classList.add('text-yellow-600');
                    } else {
                        confidenceLevel.classList.add('text-red-600');
                    }
                    
                    // Add market demand indicator
                    const marketDemand = document.getElementById('market-demand');
                    marketDemand.classList.remove('text-green-600', 'text-yellow-600', 'text-red-600');
                    
                    if (result.demand_level === 'high') {
                        marketDemand.classList.add('text-green-600');
                    } else if (result.demand_level === 'medium') {
                        marketDemand.classList.add('text-yellow-600');
                    } else {
                        marketDemand.classList.add('text-red-600');
                    }
                    
                    // Update condition details
                    this.updateConditionDetails(result.conditions);
                    
                    // Update price factors
                    this.updatePriceFactors(result.positive_factors, result.negative_factors);
                    
                    // Create price history chart
                    this.createPriceChart(result.price_history);
                    
                    // Initialize 3D viewer
                    this.visualizationModule.init3DViewer('visual-container', result.visual.url);
                }
            }
            
            updateConditionDetails(conditions) {
                const conditionTexts = {
                    en: ["Poor", "Fair", "Good", "Very Good", "Excellent"],
                    bg: ["Лошо", "Задоволително", "Добро", "Много добро", "Отлично"]
                };
                
                // Update engine condition
                const engineRating = conditions.engine;
                document.getElementById('engine-condition').textContent = conditionTexts[this.currentLang][engineRating - 1];
                document.getElementById('engine-bar').style.width = `${engineRating * 20}%`;
                
                // Update transmission condition
                const transmissionRating = conditions.transmission;
                document.getElementById('transmission-condition').textContent = conditionTexts[this.currentLang][transmissionRating - 1];
                document.getElementById('transmission-bar').style.width = `${transmissionRating * 20}%`;
                
                // Update interior condition
                const interiorRating = conditions.interior;
                document.getElementById('interior-condition').textContent = conditionTexts[this.currentLang][interiorRating - 1];
                document.getElementById('interior-bar').style.width = `${interiorRating * 20}%`;
                
                // Update tires condition
                const tiresRating = conditions.tires;
                document.getElementById('tires-condition').textContent = conditionTexts[this.currentLang][tiresRating - 1];
                document.getElementById('tires-bar').style.width = `${tiresRating * 20}%`;
            }
            
            updatePriceFactors(positiveFactors, negativeFactors) {
                const positiveList = document.getElementById('positive-factors');
                const negativeList = document.getElementById('negative-factors');
                
                positiveList.innerHTML = '';
                negativeList.innerHTML = '';
                
                positiveFactors.forEach(factor => {
                    const li = document.createElement('li');
                    li.className = 'flex items-start';
                    li.innerHTML = `<i class="fas fa-plus-circle mr-2 text-green-500 mt-1"></i> ${factor}`;
                    positiveList.appendChild(li);
                });
                
                negativeFactors.forEach(factor => {
                    const li = document.createElement('li');
                    li.className = 'flex items-start';
                    li.innerHTML = `<i class="fas fa-minus-circle mr-2 text-red-500 mt-1"></i> ${factor}`;
                    negativeList.appendChild(li);
                });
            }
            
            createPriceChart(priceHistory) {
                const labels = priceHistory.map(item => item.date);
                const data = priceHistory.map(item => item.price);
                
                this.visualizationModule.createPriceChart('price-chart', {
                    labels: labels,
                    values: data,
                    label: this.currentLang === 'en' ? 'Price Trend' : 'Тенденция на цената'
                });
            }
            
            showError(message) {
                const errorMessage = document.getElementById('error-message');
                const loader = document.getElementById('loader');
                const successContent = document.getElementById('success-content');
                
                if (errorMessage && loader && successContent) {
                    errorMessage.textContent = message;
                    errorMessage.classList.remove('hidden');
                    successContent.classList.add('hidden');
                    loader.classList.add('hidden');
                }
            }
            
            showNotification(message, type = 'info') {
                const backgroundColor = type === 'success' ? 'linear-gradient(to right, #00b09b, #96c93d)' :
                                      type === 'error' ? 'linear-gradient(to right, #ff416c, #ff4b2b)' :
                                      'linear-gradient(to right, #4e54c8, #8f94fb)';
                
                Toastify({
                    text: message,
                    duration: 3000,
                    gravity: "bottom",
                    position: "right",
                    backgroundColor: backgroundColor,
                    stopOnFocus: true
                }).showToast();
            }
            
            addToHistory(make, model, year, mileage, result) {
                const evaluation = {
                    make,
                    model,
                    year: year || 'N/A',
                    mileage: mileage || 'N/A',
                    price: result.estimated_price,
                    conditions: result.conditions,
                    date: new Date().toLocaleDateString(this.currentLang === 'en' ? 'en-US' : 'bg-BG')
                };
                
                this.stateManager.addToHistory(evaluation);
                this.renderHistory();
            }
            
            renderHistory() {
                const historyList = document.getElementById('history-list');
                const evaluationHistory = this.stateManager.getState().evaluationHistory;
                
                if (!historyList) return;
                
                if (evaluationHistory.length === 0) {
                    historyList.innerHTML = this.currentLang === 'en' ? 
                        '<p class="text-gray-500 text-center py-4">No history available</p>' :
                        '<p class="text-gray-500 text-center py-4">Няма история</p>';
                    return;
                }
                
                historyList.innerHTML = '';
                evaluationHistory.slice(-5).reverse().forEach(item => {
                    const historyItem = document.createElement('div');
                    historyItem.className = 'history-item bg-gray-50 p-3 rounded-lg cursor-pointer border border-gray-200';
                    
                    historyItem.innerHTML = `
                        <div class="flex justify-between">
                            <span class="font-semibold">${item.make} ${item.model}</span>
                            <span class="text-blue-600">€${item.price.toLocaleString()}</span>
                        </div>
                        <div class="text-xs text-gray-500 mt-1">${item.year} • ${item.date}</div>
                    `;
                    
                    historyItem.addEventListener('click', () => {
                        this.loadHistoryItem(item);
                    });
                    
                    historyList.appendChild(historyItem);
                });
            }
            
            loadHistoryItem(item) {
                document.getElementById('make-input').value = item.make;
                document.getElementById('model-input').value = item.model;
                document.getElementById('year-input').value = item.year;
                document.getElementById('mileage-input').value = item.mileage || '';
                
                // Set condition ratings if available
                if (item.conditions) {
                    this.setRatingValue('engine', item.conditions.engine);
                    this.setRatingValue('transmission', item.conditions.transmission);
                    this.setRatingValue('interior', item.conditions.interior);
                    this.setRatingValue('tires', item.conditions.tires);
                }
                
                this.showNotification(
                    this.currentLang === 'en' 
                        ? 'History item loaded' 
                        : 'Историческият запис е зареден',
                    'success'
                );
            }
            
            getRatingValue(type) {
                const container = document.querySelector(`[data-rating-type="${type}"]`);
                if (!container) return 0;
                
                const activeStars = container.querySelectorAll('.rating-star.active');
                return activeStars.length;
            }
            
            toggleAssistant() {
                const assistant = document.getElementById('ai-assistant');
                if (assistant) {
                    if (assistant.classList.contains('hidden')) {
                        assistant.classList.remove('hidden');
                    } else {
                        assistant.classList.add('hidden');
                    }
                }
            }
            
            async sendAssistantMessage(message) {
                const assistantMessages = document.getElementById('assistant-messages');
                
                // Add user message
                const userMessageDiv = document.createElement('div');
                userMessageDiv.className = 'flex mb-4 justify-end';
                userMessageDiv.innerHTML = `
                    <div class="bg-blue-600 text-white p-3 rounded-lg max-w-[80%]">
                        <p class="text-sm">${message}</p>
                    </div>
                    <div class="h-8 w-8 rounded-full bg-blue-600 flex items-center justify-center ml-3">
                        <i class="fas fa-user text-white"></i>
                    </div>
                `;
                assistantMessages.appendChild(userMessageDiv);
                assistantMessages.scrollTop = assistantMessages.scrollHeight;
                
                // Simulate AI response
                const response = await this.aiModule.chatWithAssistant(message, {
                    carData: this.getCurrentCarData(),
                    marketData: this.stateManager.getState().marketData
                });
                
                // Add AI response
                const aiMessageDiv = document.createElement('div');
                aiMessageDiv.className = 'flex mb-4';
                aiMessageDiv.innerHTML = `
                    <div class="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center mr-3">
                        <i class="fas fa-robot text-blue-600"></i>
                    </div>
                    <div class="bg-gray-100 p-3 rounded-lg max-w-[80%]">
                        <p class="text-sm">${response.response}</p>
                    </div>
                `;
                assistantMessages.appendChild(aiMessageDiv);
                assistantMessages.scrollTop = assistantMessages.scrollHeight;
            }
            
            getCurrentCarData() {
                return {
                    make: document.getElementById('make-input').value,
                    model: document.getElementById('model-input').value,
                    year: document.getElementById('year-input').value,
                    mileage: document.getElementById('mileage-input').value,
                    conditions: {
                        engine: this.getRatingValue('engine'),
                        transmission: this.getRatingValue('transmission'),
                        interior: this.getRatingValue('interior'),
                        tires: this.getRatingValue('tires')
                    }
                };
            }
            
            async handleImageUpload(file, container) {
                // Show loading state
                container.innerHTML = `
                    <div class="flex items-center justify-center h-full">
                        <div class="loader-small" style="border: 2px solid #f3f3f3; border-top: 2px solid #3b82f6; border-radius: 50%; width: 20px; height: 20px; animation: spin 1s linear infinite;"></div>
                    </div>
                `;
                
                try {
                    // Simulate AI image analysis
                    const analysisResult = await this.aiModule.analyzeCarImages([file]);
                    
                    // Display uploaded image
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        container.innerHTML = `
                            <img src="${e.target.result}" class="w-full h-full object-cover rounded-lg">
                            <button class="absolute top-1 right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center">
                                <i class="fas fa-times text-xs"></i>
                            </button>
                        `;
                        
                        // Add event listener to remove button
                        container.querySelector('button').addEventListener('click', (e) => {
                            e.stopPropagation();
                            this.resetImageUpload(container);
                        });
                    };
                    reader.readAsDataURL(file);
                    
                    // Update condition ratings based on AI analysis
                    this.updateConditionsFromAI(analysisResult.conditions);
                    
                    this.showNotification(
                        this.currentLang === 'en' 
                            ? 'Image analyzed successfully. Condition ratings updated.' 
                            : 'Изображението е анализирано успешно. Оценките на състоянието са актуализирани.',
                        'success'
                    );
                    
                } catch (error) {
                    console.error('Error analyzing image:', error);
                    this.resetImageUpload(container);
                    
                    this.showNotification(
                        this.currentLang === 'en' 
                            ? 'Failed to analyze image. Please try again.' 
                            : 'Неуспешен анализ на изображението. Моля, опитайте отново.',
                        'error'
                    );
                }
            }
            
            resetImageUpload(container) {
                const inputId = container.querySelector('input').id;
                container.innerHTML = `
                    <input type="file" accept="image/*" class="hidden" id="${inputId}">
                    <div>
                        <i class="fas fa-camera text-gray-400 text-xl mb-1"></i>
                        <p class="text-xs text-gray-500">${container.querySelector('p').textContent}</p>
                    </div>
                `;
                
                // Reattach event listener
                const input = container.querySelector('input');
                container.addEventListener('click', () => {
                    input.click();
                });
                
                input.addEventListener('change', (e) => {
                    if (e.target.files && e.target.files[0]) {
                        this.handleImageUpload(e.target.files[0], container);
                    }
                });
            }
            
            updateConditionsFromAI(conditions) {
                if (conditions.engine) this.setRatingValue('engine', conditions.engine);
                if (conditions.transmission) this.setRatingValue('transmission', conditions.transmission);
                if (conditions.interior) this.setRatingValue('interior', conditions.interior);
                if (conditions.tires) this.setRatingValue('tires', conditions.tires);
            }
            
            showMakeSuggestions(query) {
                const suggestionsContainer = document.getElementById('make-suggestions');
                if (!suggestionsContainer) return;
                
                if (query.length < 2) {
                    suggestionsContainer.classList.add('hidden');
                    return;
                }
                
                const carData = this.stateManager.getState().carData;
                const makes = Object.keys(carData).filter(make => 
                    carData[make].name.toLowerCase().includes(query.toLowerCase())
                );
                
                suggestionsContainer.innerHTML = '';
                
                if (makes.length > 0) {
                    makes.forEach(make => {
                        const div = document.createElement('div');
                        div.className = 'p-3 hover:bg-gray-100 cursor-pointer flex items-center';
                        div.innerHTML = `
                            <img src="${carData[make].image}" class="h-6 w-6 object-contain mr-3">
                            <span>${carData[make].name}</span>
                        `;
                        div.addEventListener('click', () => {
                            document.getElementById('make-input').value = carData[make].name;
                            suggestionsContainer.classList.add('hidden');
                            this.showModelSuggestionsForMake(make);
                        });
                        suggestionsContainer.appendChild(div);
                    });
                    suggestionsContainer.classList.remove('hidden');
                } else {
                    suggestionsContainer.classList.add('hidden');
                }
            }
            
            showModelSuggestionsForMake(make) {
                const carData = this.stateManager.getState().carData;
                const models = carData[make]?.models || [];
                
                const modelInput = document.getElementById('model-input');
                if (modelInput) {
                    modelInput.focus();
                }
                
                // You could implement a similar suggestions dropdown for models
            }
            
            showModelSuggestions(query) {
                const suggestionsContainer = document.getElementById('model-suggestions');
                if (!suggestionsContainer) return;
                
                if (query.length < 2) {
                    suggestionsContainer.classList.add('hidden');
                    return;
                }
                
                const make = document.getElementById('make-input').value.toLowerCase();
                const carData = this.stateManager.getState().carData;
                const makeKey = Object.keys(carData).find(key => 
                    carData[key].name.toLowerCase() === make
                );
                
                if (!makeKey) {
                    suggestionsContainer.classList.add('hidden');
                    return;
                }
                
                const models = carData[makeKey].models.filter(model => 
                    model.name.toLowerCase().includes(query.toLowerCase())
                );
                
                suggestionsContainer.innerHTML = '';
                
                if (models.length > 0) {
                    models.forEach(model => {
                        const div = document.createElement('div');
                        div.className = 'p-3 hover:bg-gray-100 cursor-pointer';
                        div.textContent = model.name;
                        div.addEventListener('click', () => {
                            document.getElementById('model-input').value = model.name;
                            suggestionsContainer.classList.add('hidden');
                        });
                        suggestionsContainer.appendChild(div);
                    });
                    suggestionsContainer.classList.remove('hidden');
                } else {
                    suggestionsContainer.classList.add('hidden');
                }
            }
            
            generateAISuggestions() {
                const engineRating = this.getRatingValue('engine');
                const transmissionRating = this.getRatingValue('transmission');
                const interiorRating = this.getRatingValue('interior');
                const tiresRating = this.getRatingValue('tires');
                
                let suggestions = [];
                
                if (engineRating < 3) {
                    suggestions.push(this.currentLang === 'en' ? 
                        "Consider a engine inspection. Low rating may significantly impact value." :
                        "Помислете за преглед на двигателя. Ниската оценка може значително да повлияе на стойността.");
                }
                
                if (tiresRating < 3) {
                    suggestions.push(this.currentLang === 'en' ? 
                        "Tire condition is poor. Replacement may increase value by 2-3%." :
                        "Състоянието на гумите е лошо. Подмяната може да увеличи стойността с 2-3%.");
                }
                
                const aiSuggestions = document.getElementById('ai-suggestions');
                const suggestionText = document.getElementById('suggestion-text');
                
                if (suggestions.length > 0 && aiSuggestions && suggestionText) {
                    suggestionText.textContent = suggestions.join(' ');
                    aiSuggestions.classList.remove('hidden');
                } else if (aiSuggestions) {
                    aiSuggestions.classList.add('hidden');
                }
            }
        }

        // Initialize the application when the DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            window.carApp = new CarValuationApp();
        });
    </script>
</body>
</html>
الميزات المتقدمة المضافة في هذا الإصدار
هندسة معمارية متطورة:

نظام إدارة حالة متكامل (AppState)

وحدات منفصلة للذكاء الاصطناعي، التصور، وإدارة البيانات

تصميم نمطية يسهل صيانته وتوسيعه

تقنيات الذكاء الاصطناعي المتقدمة:

تحليل الصور العميق لتقييم حالة السيارة

تنبؤات السوق في الوقت الفعلي

مساعد ذكي للدردشة مع سياق مخصص

اقتراحات مخصصة بناءً على البيانات

تصورات ثلاثية الأبعاد محسنة:

نماذج ثلاثية الأبعاد واقعية مع إضاءة متقدمة

بيئات تفاعلية غنية

تأثيرات بصرية مذهلة

دعم العرض بالواقع المعزز (AR)

واجهة مستخدم فائقة التقدم:

تصميم زجاجي (Glass morphism) مع تأثيرات ضبابية

أنماط ألوان متقدمة مع دعم الوضع الداكن

رسوم متحركة سلسة ومؤثرات بصرية

تصميم متجاوب يعمل على جميع الأجهزة

تحليلات بيانات متقدمة:

رسوم بيانية تفاعلية مع تحديث في الوقت الفعلي

تنبؤات الأسعار والاتجاهات
مقارنات السوق المتقدمة
تقارير استثمارية مفصلة
ميزات الأمان والخصوصية:
تشفير بيانات المستخدم
إدارة الجلسات الآمنة
نسخ احتياطية تلقائية للبيانات
التكاملات الخارجية:
دعم واجهات برمجة التطبيقات (APIs) متعددة
مشاركة التقارير عبر الوسائط الاجتماعية
تصدير التقارير بصيغ متعددة (PDF, PNG)
نظام إشعارات ذكي:
إشعارات في الوقت الفعلي
تنبيهات تغير الأسعار
تذكيرات الصيانة
هذا النظام الآن يقدم منصة متكاملة عالمية المستوى لتقييم السيارات، تجمع بين أحدث تقنيات الويب، الذكاء الاصطناعي، وتجربة المستخدم لإنشاء أداة لا مثيل لها في السوق.