rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() &&
             (request.auth.token.email in [
               'admin@globulcars.bg',
               'hamda@example.com'
             ] ||
              request.auth.token.admin == true);
    }

    function isValidUser() {
      return request.auth.token.email_verified == true;
    }

    function isRecentLogin() {
      return request.auth.token.auth_time > (timestamp.date(request.time).seconds - 300);
    }

    // Users collection
    match /users/{userId} {
      // Allow read/write for the user themselves
      allow read, write: if isOwner(userId) && isValidUser();

      // Allow admins to read/write all users
      allow read, write: if isAdmin();

      // Allow read for authenticated users (for profiles)
      allow read: if isAuthenticated() && isValidUser();

      // Validate user data on create/update
      allow create: if request.resource.data.keys().hasAll(['email', 'displayName']) &&
                       request.resource.data.email is string &&
                       request.resource.data.displayName is string &&
                       request.resource.data.email.matches('[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}');

      // Prevent sensitive field updates
      allow update: if !request.resource.data.diff(resource.data).affectedKeys()
                       .hasAny(['email', 'createdAt', 'lastLogin']);
    }

    // Cars collection
    match /cars/{carId} {
      // Allow read for all authenticated users
      allow read: if isAuthenticated() && isValidUser();

      // Allow write for car owner or admin
      allow write: if (isOwner(resource.data.sellerId) || isAdmin()) &&
                       isValidUser() && isRecentLogin();

      // Validate car data
      allow create: if request.resource.data.keys().hasAll(['title', 'price', 'sellerId', 'location']) &&
                       request.resource.data.title is string &&
                       request.resource.data.price is number &&
                       request.resource.data.price > 0 &&
                       request.resource.data.price < 10000000 && // Max 10M BGN
                       request.resource.data.sellerId == request.auth.uid;

      // Allow status updates only by admin or owner
      allow update: if (isOwner(resource.data.sellerId) || isAdmin()) &&
                       (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['sellerId', 'createdAt']) ||
                        isAdmin());
    }

    // Messages collection
    match /messages/{messageId} {
      // Allow read/write for participants or admin
      allow read, write: if isAuthenticated() && isValidUser() &&
                            (isOwner(resource.data.senderId) ||
                             isOwner(resource.data.receiverId) ||
                             isAdmin());

      // Validate message data
      allow create: if request.resource.data.keys().hasAll(['senderId', 'receiverId', 'text']) &&
                       request.resource.data.senderId == request.auth.uid &&
                       request.resource.data.text is string &&
                       request.resource.data.text.size() > 0 &&
                       request.resource.data.text.size() < 1000; // Max 1000 chars
    }

    // Conversations/Rooms collection
    match /conversations/{conversationId} {
      // Allow read/write for participants or admin
      allow read, write: if isAuthenticated() && isValidUser() &&
                            (request.auth.uid in resource.data.participants ||
                             isAdmin());

      // Validate conversation data
      allow create: if request.resource.data.keys().hasAll(['participants']) &&
                       request.resource.data.participants is list &&
                       request.auth.uid in request.resource.data.participants;
    }

    // Favorites collection
    match /favorites/{favoriteId} {
      // Allow read/write for the user themselves
      allow read, write: if isOwner(resource.data.userId) && isValidUser();

      // Validate favorite data
      allow create: if request.resource.data.keys().hasAll(['userId', 'carId']) &&
                       request.resource.data.userId == request.auth.uid;
    }

    // Search history collection
    match /searchHistory/{searchId} {
      // Allow read/write for the user themselves
      allow read, write: if isOwner(resource.data.userId) && isValidUser();

      // Validate search data
      allow create: if request.resource.data.userId == request.auth.uid;
    }

    // Reports collection (for admin reporting)
    match /reports/{reportId} {
      // Only admins can read/write reports
      allow read, write: if isAdmin();

      // Validate report data
      allow create: if isAuthenticated() && isValidUser();
    }

    // Analytics collection (aggregated data)
    match /analytics/{analyticsId} {
      // Read-only for authenticated users, write for admins
      allow read: if isAuthenticated() && isValidUser();
      allow write: if isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      // Allow read/write for the user themselves
      allow read, write: if isOwner(resource.data.userId) && isValidUser();

      // Validate notification data
      allow create: if request.resource.data.userId == request.auth.uid;
    }

    // Reviews/Ratings collection
    match /reviews/{reviewId} {
      // Allow read for all authenticated users
      allow read: if isAuthenticated() && isValidUser();

      // Allow write for authenticated users who haven't reviewed this item
      allow create: if isAuthenticated() && isValidUser() &&
                       request.resource.data.userId == request.auth.uid &&
                       !(exists(/databases/$(database)/documents/reviews/$(reviewId)));

      // Allow update/delete for review owner or admin
      allow update, delete: if (isOwner(resource.data.userId) || isAdmin()) &&
                                 isValidUser();

      // Validate review data
      allow create: if request.resource.data.keys().hasAll(['userId', 'carId', 'rating']) &&
                       request.resource.data.rating is number &&
                       request.resource.data.rating >= 1 &&
                       request.resource.data.rating <= 5;
    }

    // Images/Files metadata collection
    match /files/{fileId} {
      // Allow read for all authenticated users
      allow read: if isAuthenticated() && isValidUser();

      // Allow write for file owner or admin
      allow write: if (isOwner(resource.data.uploadedBy) || isAdmin()) &&
                       isValidUser();

      // Validate file data
      allow create: if request.resource.data.uploadedBy == request.auth.uid;
    }

    // Admin logs collection
    match /adminLogs/{logId} {
      // Only admins can read/write admin logs
      allow read, write: if isAdmin();
    }

    // System settings (read-only for all, write for admins)
    match /settings/{settingId} {
      allow read: if true; // Public read for system settings
      allow write: if isAdmin();
    }

    // Rate limiting helper (simplified)
    function checkRateLimit(collection, maxRequests, timeWindow) {
      return true; // Simplified for now - implement proper rate limiting later
    }

    // Apply rate limiting to writes
    match /{document=**} {
      allow write: if checkRateLimit('general', 100, 3600); // 100 writes per hour
    }
  }
}